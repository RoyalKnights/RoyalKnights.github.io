<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RoyalKnights</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2020-06-11T02:57:18.397Z</updated>
  <id>/</id>
  
  <author>
    <name>皇家小骑士</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu安装mysql8.0</title>
    <link href="/2020/01/02/fwd/1577939110/"/>
    <id>/2020/01/02/fwd/1577939110/</id>
    <published>2020-01-02T04:25:10.000Z</published>
    <updated>2020-06-11T02:57:18.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下载deb"><a href="#下载deb" class="headerlink" title="下载deb"></a>下载deb</h1><p>进入mysql<a href="https://dev.mysql.com/downloads/repo/apt/" target="_blank" rel="noopener">官方下载地址</a>下载deb文件，上传到ubuntu服务器<br><img src="https://img-blog.csdnimg.cn/20200102120339776.png" alt="在这里插入图片描述"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>执行(-i后面为包名)</p><pre><code>dpkg -i mysql-apt-config_0.8.14-1_all.deb</code></pre><p>选择ok<br><img src="https://img-blog.csdnimg.cn/20200102120908301.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>执行更新命令</p><pre><code>apt update</code></pre><p>执行安装命令</p><pre><code> apt install mysql-server -y</code></pre><p>设置root账户密码<br><img src="https://img-blog.csdnimg.cn/20200102121219175.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再次确认</p><p><img src="https://img-blog.csdnimg.cn/20200102121248923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择传统加密<br><img src="https://img-blog.csdnimg.cn/20200102121323286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择包升级自动重启<br><img src="https://img-blog.csdnimg.cn/20200102121535176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="设置远程连接"><a href="#设置远程连接" class="headerlink" title="设置远程连接"></a>设置远程连接</h1><p>以root账户登录mysql</p><pre><code>mysql -u root -p</code></pre><p>输入密码<br><img src="https://img-blog.csdnimg.cn/20200102121840621.png" alt="在这里插入图片描述"><br>修改mysql权限表</p><pre><code>use mysql;update user set host = &#39;%&#39; where user = &#39;root&#39;;flush privileges;</code></pre><p><img src="https://img-blog.csdnimg.cn/20200102122002438.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>重启数据库</p><pre><code>service mysql restart</code></pre>]]></content>
    
    <summary type="html">
    
      ubuntu安装mysql8.0
    
    </summary>
    
      <category term="fwd" scheme="/categories/fwd/"/>
    
    
  </entry>
  
  <entry>
    <title>jsdelivr+github使用</title>
    <link href="/2019/12/12/fwd/1576134854/"/>
    <id>/2019/12/12/fwd/1576134854/</id>
    <published>2019-12-12T07:14:14.000Z</published>
    <updated>2020-06-11T02:57:18.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>1.有github账号<br>2.<a href="https://blog.csdn.net/qq_41866776/article/details/100159653" target="_blank" rel="noopener">安装git工具</a></p><h1 id="创建github仓库"><a href="#创建github仓库" class="headerlink" title="创建github仓库"></a>创建github仓库</h1><p>进入github首页-Repository-new<br><img src="https://img-blog.csdnimg.cn/20191212143455895.png" alt="在这里插入图片描述"><br>输入对应的仓库信息-点击创建<br><img src="https://img-blog.csdnimg.cn/20191212143750695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>复制仓库地址<br><img src="https://img-blog.csdnimg.cn/20191212143855712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="克隆仓库到本地"><a href="#克隆仓库到本地" class="headerlink" title="克隆仓库到本地"></a>克隆仓库到本地</h1><p>在本地右键打开Git Bash Here-执行克隆命令</p><pre><code>git clone https://github.com/RoyalKnights/cdn.git</code></pre><p>此时将本地仓库克隆到了本地<br><img src="https://img-blog.csdnimg.cn/20191212144419170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>将想要jsdelivr访问的文件放入仓库(我这里建立一个img文件放入一张图片)<br><img src="https://img-blog.csdnimg.cn/20191212144750828.png" alt="在这里插入图片描述"><br>进入仓库文件夹,把文件添加并提交到仓库<a href="https://blog.csdn.net/qq_41866776/article/details/100159653" target="_blank" rel="noopener">更多教程</a></p><pre><code>cd cdngit add --allgit commit - m &quot;描述信息“</code></pre><p><img src="https://img-blog.csdnimg.cn/20191212150213866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="上传github"><a href="#上传github" class="headerlink" title="上传github"></a>上传github</h1><pre><code>git push -u origin master</code></pre><p>此时会让你输入github账号和密码<br><img src="https://img-blog.csdnimg.cn/20191212150329659.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="配置版本号"><a href="#配置版本号" class="headerlink" title="配置版本号"></a>配置版本号</h1><p>进入仓库点击releases<br><img src="https://img-blog.csdnimg.cn/20191212150449619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>创建一个版本号<br><img src="https://img-blog.csdnimg.cn/20191212150539440.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019121215065053.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019121215071684.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="通过jsdelivr访问"><a href="#通过jsdelivr访问" class="headerlink" title="通过jsdelivr访问"></a>通过jsdelivr访问</h1><pre><code>https://cdn.jsdelivr.net/gh/&lt;github账号&gt;/&lt;仓库名称&gt;@&lt;版本号&gt;/&lt;文件路径&gt;/&lt;文件名&gt;不输入版本号默认访问最新版本</code></pre><p>例如浏览器输入<a href="https://cdn.jsdelivr.net/gh/RoyalKnights/cdn/cdn@v1.0/img/test.jpg" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/RoyalKnights/cdn/cdn@v1.0/img/test.jpg</a><br><img src="https://img-blog.csdnimg.cn/20191212151231944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      jsdelivr+github使用
    
    </summary>
    
      <category term="fwd" scheme="/categories/fwd/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu下Docker快速部署Nextcloud</title>
    <link href="/2019/12/05/fwd/1575538139/"/>
    <id>/2019/12/05/fwd/1575538139/</id>
    <published>2019-12-05T09:28:59.000Z</published>
    <updated>2020-06-11T02:57:18.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><pre><code>apt install docker.io</code></pre><h1 id="Docker拉取Nextcloud镜像"><a href="#Docker拉取Nextcloud镜像" class="headerlink" title="Docker拉取Nextcloud镜像"></a>Docker拉取Nextcloud镜像</h1><pre><code>docker pull nextcloud</code></pre><h1 id="Docker启动Nextcloud容器"><a href="#Docker启动Nextcloud容器" class="headerlink" title="Docker启动Nextcloud容器"></a>Docker启动Nextcloud容器</h1><pre><code>docker run --name nextcloud   -p 9533:80   -v /root/nextcloud:/var/www/html/data  -d nextcloud</code></pre><p>-name: 为容器指定一个名称<br>-d:后台启动<br>-p: 指定端口映射，格式为：主机(宿主)端口:容器端口<br>-v: 绑定一个<br>输入ip地址以及对应的端口号即可进入nextcloud，若选择默认的数据库。输入管理员账号密码即可<br><img src="https://img-blog.csdnimg.cn/2019120611083751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>若需要连接mysql，输入对应的mysql信息即可，若需要连接宿主机的mysql请往下看</p><h1 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h1><h2 id="删除容器或者镜像"><a href="#删除容器或者镜像" class="headerlink" title="删除容器或者镜像"></a>删除容器或者镜像</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>docker ps -a</td><td>查看所有容器</td></tr><tr><td>docker stop  &lt;CONTAINER ID&gt;</td><td>停止指定容器</td></tr><tr><td>docker rm &lt;CONTAINER ID&gt;</td><td>删除指定容器</td></tr><tr><td>docker images</td><td>查看所有镜像</td></tr><tr><td>docker rmi &lt;IMAGE ID&gt;</td><td>删除镜像</td></tr></tbody></table><p>删除步骤：查看容器(获取容器id)-停止容器(删除前需停止)-删除容器(此时镜像还在，可以重启启用)-查看镜像(获取镜像id)-删除镜像</p><h2 id="连接宿主机的mysql"><a href="#连接宿主机的mysql" class="headerlink" title="连接宿主机的mysql"></a>连接宿主机的mysql</h2><p>***mysql需要开启远程连接权限，若不清楚怎么开启，可查看<a href="https://blog.csdn.net/qq_41866776/article/details/103382491" target="_blank" rel="noopener">这篇文章</a><br>查看docker0所对应的ip即可与主机的端口进行通信</p><pre><code>ifconfig</code></pre><p><img src="https://img-blog.csdnimg.cn/20191206114618792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在数据库的配置中选择mysql，输入账号密码数据库名以及连接宿主机的ip和端口号即可。</p>]]></content>
    
    <summary type="html">
    
      Ubuntu下Docker快速部署Nextcloud
    
    </summary>
    
      <category term="fwd" scheme="/categories/fwd/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu部署node环境以及mysql</title>
    <link href="/2019/12/04/fwd/1575437991/"/>
    <id>/2019/12/04/fwd/1575437991/</id>
    <published>2019-12-04T05:39:51.000Z</published>
    <updated>2020-06-11T02:57:18.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li>腾讯云服务器一台(安装Ubuntu Servers 18.04.1 LTS 64位)</li><li>xshell(终端模拟)和xftp(远程文件上传) <a href="https://www.netsarang.com/zh/free-for-home-school/" target="_blank" rel="noopener">点击这里家庭学校免费版</a></li><li>navicat for mysql (mysql可视化管理工具) </li></ul><h1 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h1><p>打开xshell新建会话<br><img src="https://img-blog.csdnimg.cn/20191204104806986.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入主机号点击连接<br><img src="https://img-blog.csdnimg.cn/20191204104950436.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入用户名<br><img src="https://img-blog.csdnimg.cn/20191204105131291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入密码<br><img src="https://img-blog.csdnimg.cn/20191204105152727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>连接成功</p><p><img src="https://img-blog.csdnimg.cn/20191204105216883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="变更root用户"><a href="#变更root用户" class="headerlink" title="变更root用户"></a>变更root用户</h1><p>*** 阿里云或者不想用root登陆的跳过这一步</p><h2 id="用当前账户修改root密码"><a href="#用当前账户修改root密码" class="headerlink" title="用当前账户修改root密码"></a>用当前账户修改root密码</h2><pre><code>sudo passwd root</code></pre><p><img src="https://img-blog.csdnimg.cn/20191204105645934.png" alt="在这里插入图片描述"></p><h2 id="修改ssh配置文件"><a href="#修改ssh配置文件" class="headerlink" title="修改ssh配置文件"></a>修改ssh配置文件</h2><p>执行</p><pre><code>sudo vim /etc/ssh/sshd_config</code></pre><p>点击i进入插入模式<br><img src="https://img-blog.csdnimg.cn/20191204110535127.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>找到PermitRootLogin prohibit-password改为PermitRootLogin yes并且去掉#号<br><img src="https://img-blog.csdnimg.cn/20191204111235813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>依次按下esc(退出插入模式) :(输入指令) wq(w保存q退出) 回车(确认更改)</p><h2 id="重启ssh服务"><a href="#重启ssh服务" class="headerlink" title="重启ssh服务"></a>重启ssh服务</h2><pre><code>sudo service ssh restart</code></pre><h2 id="重新连接"><a href="#重新连接" class="headerlink" title="重新连接"></a>重新连接</h2><p>在xsell中按照先前的步骤重新建立一个连接，用户名为root，密码为设置的密码<br>@前面为root则连接成功</p><p><img src="https://img-blog.csdnimg.cn/20191204112122202.png" alt="在这里插入图片描述"></p><h2 id="删除旧用户"><a href="#删除旧用户" class="headerlink" title="删除旧用户"></a>删除旧用户</h2><p>*** 不想删除则忽略这一步</p><pre><code>userdel -r username</code></pre><p><img src="https://img-blog.csdnimg.cn/20191204112436184.png" alt="在这里插入图片描述"></p><h1 id="node环境部署"><a href="#node环境部署" class="headerlink" title="node环境部署"></a>node环境部署</h1><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><p>执行</p><pre><code>apt-get install nodejs -y*** -y代表yes，若没有输入，则在安装过程中根据提示输入yes即可</code></pre><p>若没有root权限则执行</p><pre><code>sudo apt-get install nodejs -y*** 没有root权限则加sudo执行，后续不做说明</code></pre><p>安装完成后执行node -v查看是否成功<br><img src="https://img-blog.csdnimg.cn/20191204112741488.png" alt="在这里插入图片描述"></p><h2 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h2><p>执行</p><pre><code>apt-get install npm -y</code></pre><p>安装完成后执行npm -v查看是否成功</p><p><img src="https://img-blog.csdnimg.cn/20191204113056567.png" alt="在这里插入图片描述"></p><h2 id="安装pm2"><a href="#安装pm2" class="headerlink" title="安装pm2"></a>安装pm2</h2><p>pm2是node的一个进程管理工具<br>安装命令</p><pre><code>npm install -g pm2</code></pre><p>pm2常用命令</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>pm2 start app.js</td><td>pm2启动</td></tr><tr><td>pm2 start app.js –name=”newname”</td><td>以newname这个名字进行启动</td></tr><tr><td>pm2 start app.js –watch</td><td>当文件有变化时自动重启</td></tr><tr><td>pm2 list</td><td>查看pm2所有的应用程序</td></tr><tr><td>pm2 stop</td><td>停止命令，可接all，停止所有的命令，Id号，停止指定id的命令，进程名，停止指定名字的命令</td></tr><tr><td>pm2 restart</td><td>重启命令，参数同stop</td></tr><tr><td>pm2 delete</td><td>删除命令，参数同stop</td></tr><tr><td>pm2 save</td><td>保存服务</td></tr><tr><td>pm2 startup</td><td>把已启动服务加到systemd中</td></tr></tbody></table><p>***后两条命令为开机自启</p><h1 id="部署mysql环境"><a href="#部署mysql环境" class="headerlink" title="部署mysql环境"></a>部署mysql环境</h1><h2 id="安装指令"><a href="#安装指令" class="headerlink" title="安装指令"></a>安装指令</h2><pre><code>apt-get install mysql-server -yapt-get install mysql-client -yapt-get install libmysqlclient-dev -y</code></pre><h2 id="变更密码"><a href="#变更密码" class="headerlink" title="变更密码"></a>变更密码</h2><p>查看默认账号和密码</p><pre><code>cat /etc/mysql/debian.cnf</code></pre><p><img src="https://img-blog.csdnimg.cn/20191204121112928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用默认账户登陆mysql，输入默认密码</p><pre><code>mysql -u debian-sys-maint -p </code></pre><p><img src="https://img-blog.csdnimg.cn/20191204121308679.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>更改密码</p><pre><code>use mysql;update mysql.user set authentication_string=password(&#39;password&#39;) where user=&#39;root&#39; and Host =&#39;localhost&#39;;update user set plugin=&quot;mysql_native_password&quot;; flush privileges;quit;</code></pre><p><img src="https://img-blog.csdnimg.cn/20191204121604682.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重启mysql</p><pre><code>service mysql restart</code></pre><p>以root账户登陆</p><pre><code>mysql -u root -p</code></pre><h2 id="修改远程连接"><a href="#修改远程连接" class="headerlink" title="修改远程连接"></a>修改远程连接</h2><p>打开修改musql配置文件</p><pre><code>vim /etc/mysql/mysql.conf.d/mysqld.cnf</code></pre><p>将#bind-address = 127.0.0.1注释</p><p><img src="https://img-blog.csdnimg.cn/20191204132538352.png" alt="在这里插入图片描述"><br>修改mysql权限表<br>以root账户登陆</p><pre><code>use mysql;update user set host = &#39;%&#39; where user = &#39;root&#39;;flush privileges;</code></pre><p><img src="https://img-blog.csdnimg.cn/20191204132812494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重启mysql</p><pre><code>service mysql restart</code></pre><p>打开navicat-新建mysql连接<br><img src="https://img-blog.csdnimg.cn/20191204133307822.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击测试连接-成功后确认</p><h1 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h1><p>可直接在xshell中打开xftp</p><p><img src="https://img-blog.csdnimg.cn/20191204133549373.png" alt="在这里插入图片描述"><br>左边窗口选择文件右键传输即可上传</p><h1 id="搭建ftp服务器"><a href="#搭建ftp服务器" class="headerlink" title="搭建ftp服务器"></a>搭建ftp服务器</h1><p>安装</p><pre><code>apt-get install vsftpd</code></pre><p>修改sftpd.conf文件,将#write_enable=YES前的#去掉，表示允许上传。其他配置请自行百度</p><pre><code>vim /etc/vsftpd.conf</code></pre><p><img src="https://img-blog.csdnimg.cn/2019120416121346.png" alt="在这里插入图片描述"><br>更改/etc/ftpusers，注释掉root用户，表示可以通过root用户登陆</p><pre><code>vim /etc/ftpusers</code></pre><p><img src="https://img-blog.csdnimg.cn/20191204161330601.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重启服务</p><pre><code>/etc/init.d/vsftpd restart</code></pre><p>彻底删除</p><pre><code>apt-get remove --purge vsftpd</code></pre>]]></content>
    
    <summary type="html">
    
      ubuntu部署node环境以及mysql
    
    </summary>
    
      <category term="fwd" scheme="/categories/fwd/"/>
    
    
  </entry>
  
  <entry>
    <title>promise对象使用</title>
    <link href="/2019/10/29/qd/1572353580/"/>
    <id>/2019/10/29/qd/1572353580/</id>
    <published>2019-10-29T12:53:00.000Z</published>
    <updated>2020-06-11T02:57:18.397Z</updated>
    
    <content type="html"><![CDATA[<p>大量的异步操作，如果要顺序执行的话，则会形成回调地狱，通过promise对象，即可解决回调地狱。<br>以node为例，假设我们有一个需求<br>1.判断test.txt是否存在，不存在则输出错误<br>2.若存在则删除这个文件<br>3.写入一个新的文件<br>假如不用promise对象，代码如下</p><pre><code class="js">const fs=require(&#39;fs&#39;)fs.stat(&#39;./test.txt&#39;,(err,states)=&gt;{    if(err){        console.log(err)    }else{           console.log(&quot;文件存在&quot;)        fs.unlink(&#39;./test.txt&#39;,(err)=&gt;{            if(err){                console.log(err)            }else{                console.log(&quot;文件删除成功&quot;)                fs.writeFile(&#39;./test1.txt&#39;,&#39;HelloWorld&#39;,(err)=&gt;{                    if(err){                        console.log(err)                    }else{                        console.log(&quot;新文件写入成功&quot;)                        //若有更多的操作则继续在这写，形成回调地狱                    }                })            }        })    }})</code></pre><p>当操作顺序执行的操作越多的时候，便会一直写回调，形成回调地狱。此时引入promise对象即可解决这个问题。<br>promise的构造函数中包含两个参数，resolve-成功之后的回调函数，reject-失败之后的回调函数。</p><pre><code class="js">const promise=new promise((resolve,reject)=&gt;{    if(/*异步操作成功*/){        resolve()//可以传参,传入.then(msg)    }else{        reject()//可以传参,传入.then(err)    }})</code></pre><p>当实例生成后，.then()指定resolve的回调函数，.catch指定reject的回调函数。<br>用promise对象重写上述例子</p><pre><code class="js">const fs = require(&#39;fs&#39;)//将每个Promise对象封装成函数，返回Promise对象//判断文件是否存在function isExit() {    return new Promise((resolve, reject) =&gt; {        fs.stat(&#39;./test.txt&#39;, (err) =&gt; {            if (err) {                reject(&#39;err1&#39;)            } else {                resolve(&#39;文件存在&#39;)            }        })    })}function deleteF() {    return new Promise((resolve, reject) =&gt; {        fs.unlink(&#39;./test.txt&#39;, (err) =&gt; {            if (err) {                reject(&#39;err2&#39;)            } else {                resolve(&#39;文件删除成功&#39;)            }        })    })}function writeF() {    return new Promise((resolve, reject) =&gt; {        fs.writeFile(&#39;./test1.txt&#39;, &#39;HelloWorld&#39;, (err) =&gt; {            if (err) {                reject(&#39;err3&#39;)            } else {                resolve(&#39;新文件写入成功&#39;)            }        })    })}//链式操作,所有错误共用一个catchisExit()    .then((msg) =&gt; {        console.log(msg)        return deleteF()    })    .then((msg) =&gt; {        console.log(msg)        return writeF()    })    .then((msg) =&gt; {        console.log(msg)    })    .catch((err) =&gt; {        console.log(err)    })</code></pre><p>若要中断链式操作，则抛出一个错误信息即可</p><pre><code class="js">isExit()    .then((msg) =&gt; {        console.log(msg)        return deleteF()    })    .then((msg) =&gt; {        console.log(msg)        return writeF()    })    .then((msg) =&gt; {        console.log(msg)    })    .then(()=&gt;{        console.log(&#39;这是多余的操作，但是要存在，下一个then不执行&#39;)        //抛出错误信息中断下一个操作        throw new Error(&#39;停止输出&#39;)    })    .then(()=&gt;{        console.log(&#39;看看我输出来了吗&#39;)    })    .catch((err) =&gt; {        console.log(err)    })</code></pre><p>输出结果</p><pre><code>文件存在文件删除成功新文件写入成功这是多余的操作，但是要存在，下一个then不执行Error: 停止输出    at isExit.then.then.then.then</code></pre>]]></content>
    
    <summary type="html">
    
      promise对象使用
    
    </summary>
    
      <category term="qd" scheme="/categories/qd/"/>
    
    
  </entry>
  
  <entry>
    <title>NVM安装使用教程</title>
    <link href="/2019/10/21/qt/1571642507/"/>
    <id>/2019/10/21/qt/1571642507/</id>
    <published>2019-10-21T07:21:47.000Z</published>
    <updated>2020-06-11T02:57:18.398Z</updated>
    
    <content type="html"><![CDATA[<p>nvm主要用于切换node版本</p><h1 id="卸载node"><a href="#卸载node" class="headerlink" title="卸载node"></a>卸载node</h1><p>安装nvm前最好对以前安装的node进行卸载<br>在控制面版或者应用列表中卸载nodejs<br>删除npm的相关文件<br>例如C:\Users\<user>\AppData\Roaming\npm</user></p><h1 id="下载nvm"><a href="#下载nvm" class="headerlink" title="下载nvm"></a>下载nvm</h1><p>进入<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">GitHub</a><br><img src="https://img-blog.csdnimg.cn/20191021152530280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载安装版<br>打开<br><img src="https://img-blog.csdnimg.cn/20191021154056645.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191021154654446.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/2019102115420379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20191021154352587.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191021154412985.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h1><p>输入<code>nvm list available</code>可以查看可以安装的版本<br><img src="https://img-blog.csdnimg.cn/20191021153131530.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入<code>nvm install vXX.XX.XX</code>v后面接版本号，即可安装对应版本</p><blockquote><p>安装node需要科学上网，若不能科学上网，打开nvm的安装根路径里的settings.txt加入下列两行<br>一行为node的下载镜像，一行为npm的下载镜像<br>node_mirror:<a href="https://npm.taobao.org/mirrors/node/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/node/</a><br>    npm_mirror:<a href="https://npm.taobao.org/mirrors/npm/" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/npm/</a></p></blockquote><p>执行nvm use XX.XX.XX即可执行和切换相应的版本</p><p>输入<code>nvm list</code>可查看使用版本<br><img src="https://img-blog.csdnimg.cn/20191021163919354.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      NVM安装使用教程
    
    </summary>
    
      <category term="qt" scheme="/categories/qt/"/>
    
    
  </entry>
  
  <entry>
    <title>node.js教程--持续更新中</title>
    <link href="/2019/09/24/ht/1573006884/"/>
    <id>/2019/09/24/ht/1573006884/</id>
    <published>2019-09-24T12:09:14.000Z</published>
    <updated>2020-06-11T02:57:18.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node安装"><a href="#node安装" class="headerlink" title="node安装"></a>node安装</h1><p>进入<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node官网</a><br><img src="https://img-blog.csdnimg.cn/20191021162812855.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>第一个为长期支持的版本，可以理解成稳定版，第二个为发布版本，含有最新的功能。可根据需求下载安装。<br>下载完成后，打开文件选择路径即可安装。<br>***若需要切换不同的版本，则需要使用nvm</p><p><a href="https://mp.csdn.net/mdeditor/102664679#" target="_blank" rel="noopener">NVM安装使用教程</a></p><h1 id="REPL"><a href="#REPL" class="headerlink" title="REPL"></a>REPL</h1><p>Node.js中REPL(交互式解释器) 表示一个电脑的环境，可以在终端输入命令，并接受响应</p><ul><li>读取(read) - 读取用户输入的js代码</li><li>执行(exec)- 执行用户输入的js代码</li><li>打印(print)- 打印用户输入的js代码</li><li>循环(loop)- 循环操作以上步骤直到用户两次按下 ctrl-c 按钮退出</li></ul><p>类似于浏览器的调试窗口，可执行简单的表达式运算，这里不多做解释。<br>附上一些常用的命令</p><ul><li>ctrl + c 按下两次 - 退出 Node REPL</li><li>ctrl + d - 退出 Node REPL</li><li>向上/向下 键 - 查看输入的历史命令</li><li>.help - 列出使用命令</li></ul><p><img src="https://img-blog.csdnimg.cn/20190924202039176.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在E盘放入一个hello.js，内容为<code>console.log(&quot;hello&quot;)</code>,执行终端</p><p><img src="https://img-blog.csdnimg.cn/20190924202723712.png" alt="在这里插入图片描述"></p><h1 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h1><p>1.创建一个模块(一个js就是一个模块)<br>2.导出一个模块(module.exports=name)<br>3.引入一个模块并且调用(require)</p><p>这里用个例子来解释模块的导出以及导入<br>dog.js功能模块</p><pre><code class="js">let dog={    dogname:&#39;wangcai&#39;,    say(){        console.log(&#39;wangwang&#39;)    }}module.exports=dog</code></pre><p>main.js引用模块</p><pre><code class="js">//引入模块，赋值给calconst Module=require(&#39;./dog&#39;)console.log(Module.dogname);Module.say()</code></pre><p>终端执行</p><p><img src="https://img-blog.csdnimg.cn/20191005145009953.png" alt="在这里插入图片描述"></p><h1 id="内置模块"><a href="#内置模块" class="headerlink" title="内置模块"></a>内置模块</h1><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>fs 模块提供了一个 API，用于以模仿标准 POSIX 函数的方式与文件系统进行交互。</p><blockquote><p>这里全部操作只讲解异步操作，同步操作请参照官方文档，同步操作中，可以用try catch语句捕获异常。</p></blockquote><p>异步读取文件目录</p><blockquote><p>   fs.readdir(path[, options], callback)</p></blockquote><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>path</td><td>路径</td></tr><tr><td>options</td><td>可选参数,encoding(可选编码默认UTF-8),withFileTypes(默认false))</td></tr><tr><td>callback</td><td>回调函数,err(为null则成功,否则返回错误信息),files(目录中的文件名的数组)</td></tr></tbody></table><p>文件目录<br><img src="https://img-blog.csdnimg.cn/20191005152939553.png" alt="在这里插入图片描述"><br>    代码</p><pre><code class="js">const fs=require(&#39;fs&#39;)fs.readdir(&#39;./&#39;,(err,file)=&gt;{    //读取正确err为null，否则为错误信息    if (err) throw err       console.log(file)})fs.readdir(&#39;./dir&#39;,(err,file)=&gt;{    if (err) throw err       console.log(file)})</code></pre><p>输出结果<br>    <img src="https://img-blog.csdnimg.cn/20191005153223821.png" alt="在这里插入图片描述"><br>创建目录</p><blockquote><p>fs.mkdir(path[, options], callback)</p></blockquote><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>path</td><td>路径</td></tr><tr><td>options</td><td>可选参数,recursive(recursive 属性默认值: false),mode( Windows 上不支持默认值: 0o777)</td></tr><tr><td>callback</td><td>回调函数,err(为null则成功,否则返回错误信息)</td></tr></tbody></table><p>代码</p><pre><code class="js">const fs=require(&#39;fs&#39;)fs.mkdir(&#39;./test&#39;,(err)=&gt;{    if (err) throw err       console.log(&#39;创建目录成功&#39;)})</code></pre><p>重命名</p><blockquote><p>fs.rename(oldPath, newPath, callback</p></blockquote><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>oldPath</td><td>原文件名字</td></tr><tr><td>newPath</td><td>重命名后的文件名字</td></tr><tr><td>callback</td><td>回调函数,err(为null则成功,否则返回错误信息)</td></tr></tbody></table><p>代码</p><pre><code class="js">const fs=require(&#39;fs&#39;)fs.rename(&#39;./test&#39;,&#39;./test1&#39;,(err)=&gt;{    if(err) throw err    console.log(&quot;重命名成功&quot;)})</code></pre><p>写文件</p><blockquote><p>fs.writeFile(file, data[, options], callback)</p></blockquote><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>file</td><td>文件名或文件描述符</td></tr><tr><td>data</td><td>写入的数据</td></tr><tr><td>options</td><td>可选参数,encoding(可选编码默认UTF-8),mode(模式),flag(文件系统标志默认w)</td></tr><tr><td>callback</td><td>回调函数,err为null则成功,否则返回错误信息</td></tr></tbody></table><pre><code class="js">const fs=require(&#39;fs&#39;)fs.writeFile(&#39;./test.txt&#39;,&#39;HelloWorld&#39;,[&#39;utf-8&#39;,&#39;w&#39;],(err)=&gt;{    if (err) throw err    console.log(&#39;文件写入成功&#39;)})</code></pre><p>  读文件</p><pre><code>fs.readFile(path[, options], callback)</code></pre><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>path</td><td>文件路径</td></tr><tr><td>options</td><td>可选参数encoding(可选编码默认null),flag(文件系统标志默认r)</td></tr><tr><td>callback</td><td>回调参数,err(错误信息),data(返回的数据,如果没指定编码,返回原始的 buffer)</td></tr></tbody></table><pre><code class="js">const fs=require(&#39;fs&#39;)fs.readFile(&#39;./test.txt&#39;,&#39;utf-8&#39;,(err,data)=&gt;{       if(err) throw err    console.log(data)})</code></pre><p>删除文件</p><blockquote><p>fs.unlink(path, callback)</p></blockquote><p>代码</p><pre><code class="js">const fs=require(&#39;fs&#39;)fs.unlink(&#39;./test.txt&#39;,(err)=&gt;{    if(err) throw err    console.log(&#39;文件删除成功&#39;)})</code></pre><p><a href="http://nodejs.cn/api/fs.html" target="_blank" rel="noopener">更多请点击fs官方文档</a></p><h2 id="url处理"><a href="#url处理" class="headerlink" title="url处理"></a>url处理</h2><p>url 模块用于处理与解析 URL<br><img src="https://img-blog.csdnimg.cn/20191005170228519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>url.parse在最新node中为遗留属性，这里不做讲解，采用URL类进行讲解</p></blockquote><p>URL 类</p><pre><code>new URL(input[, base])</code></pre><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>input</td><td>要解析的绝对或相对的 URL。如果 input 是相对路径，则需要 base。 如果 input 是绝对路径，则忽略 base</td></tr><tr><td>base</td><td>如果 input 不是绝对路径，则为要解析的基本 URL</td></tr></tbody></table><p>代码</p><pre><code class="js">const myURL = new URL(&#39;https://user:pass@sub.example.com:8080/p/a/t/h?query=string#hash&#39;)console.log(myURL.href)//整个连接console.log(myURL.protocol)//协议console.log(myURL.username)//用户名console.log(myURL.password)//密码console.log(myURL.host)//主机console.log(myURL.hostname)//主机名console.log(myURL.port)//端口号console.log(myURL.pathname)//路径名console.log(myURL.search)//请求参数console.log(myURL.hash)//哈希值console.log(myURL.searchParams)//URL查询参数的URLSearchParams对象</code></pre><p>结果<br><img src="https://img-blog.csdnimg.cn/20191005205456177.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>URLSearchParams 类<br>URLSearchParams API 提供对 URL 查询部分的读写权限</p><table><thead><tr><th>方法/属性</th><th>含义</th></tr></thead><tbody><tr><td>.append(name, value)</td><td>在查询字符串中附加一个新的键值对</td></tr><tr><td>.delete(name)</td><td>删除所有键为name的键值对</td></tr><tr><td>.get(name)</td><td>返回键是name的第一个键值对的值。如果没有对应的键值对，则返回null</td></tr><tr><td>.getAll(name)</td><td>返回键是name的所有键值对的值，如果没有满足条件的键值对，则返回一个空的数组</td></tr><tr><td>.has(name)</td><td>如果存在至少一对键是 name 的键值对则返回 true</td></tr><tr><td>.set(name, value)</td><td>将 URLSearchParams 对象中与 name 相对应的值设置为 value。 如果已经存在键为 name 的键值对，则将第一对的值设为 value 并且删除其他对。 如果不存在，则将此键值对附加在查询字符串后</td></tr><tr><td>.toString()</td><td>返回查询参数序列化后的字符串，必要时存在百分号编码字符</td></tr><tr><td>.entries()</td><td>在查询中的每个键值对上返回一个 ES6 Iterator。 迭代器的每一项都是一个 JavaScript Array。 Array 的第一个项是键 name， Array 的第二个项是值 value</td></tr><tr><td>.keys()</td><td>在每一个键值对上返回一个键的 ES6 Iterator</td></tr><tr><td>.values()</td><td>在每一个键值对上返回一个值的 ES6 Iterator</td></tr></tbody></table><p>代码</p><pre><code class="js">const myURL = new URL(&#39;https://user:pass@sub.example.com:8080/p/a/t/h?query=string#hash&#39;)//.searchParams方法返回的已经是个URLSearchParams类console.log(myURL.searchParams.get(&#39;query&#39;))//构建一个URLSearchParams类let params = new URLSearchParams(&#39;a=1&amp;a=2&amp;b=3&#39;);params.append(&#39;c&#39;, &#39;3&#39;)console.log(params.toString())params.delete(&#39;b&#39;)console.log(params.toString())console.log(params.getAll(&#39;a&#39;))console.log(params.has(&#39;a&#39;))params.set(&#39;a&#39;, &#39;4&#39;)console.log(params.toString())for(let arr of params.entries()){    console.log(arr[0]+&#39;-&#39;+arr[1])}for (let name of params.keys()) {    console.log(name);}for (let value of params.values()) {    console.log(value);}</code></pre><p>结果<br><img src="https://img-blog.csdnimg.cn/20191005213446733.png" alt="在这里插入图片描述"><br><a href="http://nodejs.cn/api/url.html" target="_blank" rel="noopener">更多请点击url官方文档</a></p><h1 id="第三方模块使用实例"><a href="#第三方模块使用实例" class="headerlink" title="第三方模块使用实例"></a>第三方模块使用实例</h1><p>在<a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm的官网</a>上，有许多第三方模块，这里以发送邮件的模块–nodemailer为例，讲述如何使用第三方模块<br>0.初始化npm项目<br>进入终端，执行<code>npm init</code><br><img src="https://img-blog.csdnimg.cn/20191008230716709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入命令后，分别填写项目信息，也可以不填，填写完成后输入yes。<br>1.首页搜索nodemailer<br><img src="https://img-blog.csdnimg.cn/20191008214526259.png" alt="在这里插入图片描述"><br>2.找到帮助文档或者官网<br><img src="https://img-blog.csdnimg.cn/20191008214629278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.安装模块</p><pre><code>npm install nodemailer</code></pre><p>4.查看示例使用并且修改</p><pre><code class="js">&#39;use strict&#39;;//引入node模块const nodemailer = require(&#39;nodemailer&#39;);//创建发送邮件的对象let transporter = nodemailer.createTransport({    host: &#39;smtp.qq.com&#39;, //发送方邮箱类型主机号，通过node包里的well-known里services.json查询    port: 465, //端口号    secure: true, // 465端口为true, 其他端口为false    /*通过well-known查询的qq邮箱信息        &quot;QQ&quot;: {        &quot;domains&quot;: [&quot;qq.com&quot;],        &quot;host&quot;: &quot;smtp.qq.com&quot;,        &quot;port&quot;: 465,        &quot;secure&quot;: true        },     */    auth: {        user: &#39;xxxxxxxxx@qq.com&#39;, //发送方邮箱地址        pass: &#39;xxxxxxxxx&#39; //mtp验证码    }    /*    qq邮箱mtp开启方法    设置-账户-POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV服务    开通POP3/SMTP服务，其他自行查找或百度    */});transporter.sendMail({    from: &#39;&quot;HelleWorld有限公司&quot; &lt;xxxxxx@qq.com&gt;&#39;, // 发件方地址    to: &#39;xxxxxxxx@qq.com,xxxxxxxx@qq.com&#39;, // 多个邮箱用逗号隔开    subject: &#39;验证码&#39;, // 主题    text: &#39;您的验证码信息是123456&#39;, // 文本信息    html: &#39;&lt;b&gt;您的验证码信息是123456&lt;/b&gt;&#39; // html信息,若使用text则html无效});</code></pre><h1 id="简易爬虫"><a href="#简易爬虫" class="headerlink" title="简易爬虫"></a>简易爬虫</h1><p>通过<a href="http://nodejs.cn/api/http.html#http_http_get_options_callback" target="_blank" rel="noopener">get方法</a>获取目标网站，通过cheerio分析网站内容<br>1.数据处理部分</p><pre><code class="js">/*基本构架*///根据协议引入http或者https模块const http=require(&#39;http&#39;)let url=&#39;https://movie.douban.com/&#39;http.get(url,(res)=&gt;{    //数据分段，只有接受数据会触发data 事件chunk每次接受新的数据片段    res.on(&#39;data&#39;,chunk=&gt;{        console.log(&#39;数据传输&#39;)    })    //数据传输完成    res.on(&#39;end&#39;,()=&gt;{        console.log(&#39;数据传输完毕&#39;)    })}).on(&#39;error&#39;,(err)=&gt;{    console.log(&#39;请求错误&#39;)})</code></pre><p>案例:将豆瓣电影的网页爬取下来存在一个html页面下</p><pre><code class="js">const http = require(&#39;https&#39;)const fs = require(&#39;fs&#39;)let url = &#39;https://movie.douban.com/&#39;http.get(url, (res) =&gt; {    //数据分段，只有接受数据会触发data 事件chunk每次接受新的数据片段    let rawData = &#39;&#39;    res.on(&#39;data&#39;, chunk =&gt; {        rawData += chunk    })    //数据传输完成    res.on(&#39;end&#39;, () =&gt; {        fs.writeFile(&#39;./douban.html&#39;, rawData, (err) =&gt; {            if (err) throw err            console.log(&#39;文件写入成功&#39;)        })    })}).on(&#39;error&#39;, (err) =&gt; {    console.log(err)})</code></pre><p>2.安全判断</p><pre><code class="js">const http = require(&#39;https&#39;)const fs = require(&#39;fs&#39;)let url = &#39;https://movie.douban.com/&#39;http.get(url, (res) =&gt; {    //状态码    const { statusCode } = res    //const statusCode=res.statusCode    //请求头    const contentType = res.headers[&#39;content-type&#39;]    let error    if (statusCode !== 200) {        error = new Error(&#39;请求状态错误&#39;);    } else if (!/^ text\/html/.test(contentType)) {        //正则验证        error = new Error(&#39;请求类型错误&#39;);    }    if (error) {        console.log(error);        res.resume();//清除缓存        return false;    }}).on(&#39;error&#39;, (err) =&gt; {    console.log(err)})</code></pre><p>3.分析网站内容<br>通过npm命令安装cheerio模块</p><pre><code>npm install cheerio</code></pre><p>类似于jq选择器选择元素</p><pre><code class="js">const cheerio = require(&#39;cheerio&#39;)const $ = cheerio.load(&#39;&lt;div class=&quot;box&quot;&gt;&lt;img src=&quot;pictruelink1&quot;&gt;&lt;img src=&quot;pictruelink2&quot;&gt;&lt;/div&gt;&#39;)// 类似于jq选择器的各种用法//$(&#39;.box&#39;).text(&#39;title&#39;)//$(&#39;.box&#39;).addClass(&#39;welcome&#39;)//console.log($.html())$(&#39;img&#39;).each((index,el)=&gt;{    console.log(index)    console.log($(el).attr(&#39;src&#39;))})</code></pre><p>案例:将豆瓣电影所有图片地址爬取下来打印</p><pre><code class="js">const http = require(&#39;https&#39;)const cheerio = require(&#39;cheerio&#39;)let url = &#39;https://movie.douban.com/&#39;http.get(url, (res) =&gt; {    //安全判断    //状态码    const { statusCode } = res    //const statusCode=res.statusCode    //请求头    const contentType = res.headers[&#39;content-type&#39;]    let error    if (statusCode !== 200) {        error = new Error(&#39;请求状态错误&#39;);    } else if (!/^text\/html/.test(contentType)) {        //正则验证        error = new Error(&#39;请求类型错误&#39;);    }    if (error) {        console.log(error);        res.resume();//清除缓存        return false;    }    //数据分段，只有接受数据会触发data 事件chunk每次接受新的数据片段    let rawData = &#39;&#39;    res.on(&#39;data&#39;, chunk =&gt; {        rawData += chunk    })    //数据传输完成     res.on(&#39;end&#39;, () =&gt; {        const $ = cheerio.load(rawData)        $(&#39;img&#39;).each((index,el)=&gt;{            console.log($(el).attr(&#39;src&#39;))        })    })}).on(&#39;error&#39;, (err) =&gt; {    console.log(err)})</code></pre><h1 id="express框架"><a href="#express框架" class="headerlink" title="express框架"></a>express框架</h1><p>安装方式</p><pre><code>    npm install express</code></pre><p> HelloWorld</p><pre><code class="js">const express=require(&#39;express&#39;)//express实例化const app=express()//get方法，接受前端的get请求app.get(&#39;/&#39;,(req,res)=&gt;{    res.send(&#39;Hello World&#39;)})//监听9501端口，运行服务器app.listen(9501,()=&gt;{    console.log(&#39;Server Start&#39;)})</code></pre><p>在浏览器运行<a href="http://localhost:9501/开始服务器" target="_blank" rel="noopener">http://localhost:9501/开始服务器</a></p><p>get接收参数<br>.query属性接收get方法传过来的数据</p><pre><code class="js">const express=require(&#39;express&#39;)//express实例化const app=express()app.get(&#39;/login&#39;,(req,res)=&gt;{    //console.log(req.query)    //打印结果       //{ username: &#39;bob&#39;, password: &#39;123456&#39; }    let { username,password}=req.query    if(username===&#39;bob&#39;&amp;&amp;password===&#39;123456&#39;){        res.send({code:0,msg:&#39;login success&#39;})     }else{           res.send({code:-1,msg:&#39;login fail&#39;})    }})app.listen(9501,()=&gt;{    console.log(&#39;Server Start&#39;)})</code></pre><p>在浏览器输入<a href="http://localhost:9501/login?username=bob&amp;password=123456开启服务器查看运行结果" target="_blank" rel="noopener">http://localhost:9501/login?username=bob&amp;password=123456开启服务器查看运行结果</a><br>post接收参数<br>post解析参数需要用到body-parser插件<br>安装方法</p><pre><code>    npm install body-parser</code></pre><p>body属性接受post方法传递过来的参数</p><pre><code class="js">const express=require(&#39;express&#39;)const bodypaser=require(&#39;body-parser&#39;)//express实例化const app=express()//app.use为中间件的使用方法，见下文//解析表单数据 application/x-www-form-urlencodedapp.use(bodypaser.urlencoded({ extended: false }))//解析json格式数据 application/jsonapp.use(bodypaser.json())app.post(&#39;/login&#39;,(req,res)=&gt;{    //console.log(req.body)       // { username: &#39;bob&#39;, password: &#39;123456&#39; }    let { username,password}=req.body    if(username===&#39;bob&#39;&amp;&amp;password===&#39;123456&#39;){        res.send({code:0,msg:&#39;login success&#39;})     }else{        res.send({code:-1,msg:&#39;login fail&#39;})    }})app.listen(9501,()=&gt;{    console.log(&#39;Server Start&#39;)})</code></pre><p><img src="https://img-blog.csdnimg.cn/20191020212514881.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>中间件<br>中间件就是在收到请求之后以及发出响应之前执行的一些函数，也可将其理解成一个拦截器。<br>原型为:</p><blockquote><p>app.use([path,] function [, function…])</p></blockquote><p>path如果为空，则默认为’/‘<br>中间件分以下三种<br>1.内置中间件<br>express.static用来处理静态资源，是express的内置中间件，具体用如下</p><pre><code class="js">//在node里建立一个img文件夹放入pic.jpgconst express=require(&#39;express&#39;)//引入path路径处理模块const path=require(&#39;path&#39;)const app=express()//使用内置中间件//__dirname为当前文件所在的目录，path中的join方法用于拼接路径//app.use(express.static(path.join(__dirname,&#39;./img&#39;)))//访问http://localhost:9595/pic.jpg即可查看图片app.use(&#39;/tupian&#39;,express.static(path.join(__dirname,&#39;./img&#39;)))//访问http://localhost:9595/tupian/pic.jpg即可查看图片app.listen(9595,()=&gt;{    console.log(&#39;Server Start&#39;)})</code></pre><p>2.自定义中间件<br>自定义中间件的函数为function(req,res,next)，可以为全局的，可以为局部的。next表示是否继续往下执行<br>例:多端口验证token(这里token先用一个随机的字符串表示)</p><pre><code class="js">const express=require(&#39;express&#39;)const app=express()//先进入中间件，判断传入的是否有一个参数为token有则往下执行，没有则返回结果，不往下执行app.use(&#39;/&#39;,(req,res,next)=&gt;{    let {token}=req.query    if(token){        next()    }else{        res.send(&#39;缺少token&#39;)    }})app.get(&#39;/test1&#39;,(req,res)=&gt;{    res.send(&#39;test1&#39;)})app.get(&#39;/test2&#39;,(req,res)=&gt;{    res.send(&#39;test2&#39;)})app.listen(9595,()=&gt;{    console.log(&#39;Server Start&#39;)})//访问http://localhost:9595/test1，显示缺少token//http://localhost:9595/test2?token=fsdklv，显示test2</code></pre><p>例:路由的封装<br>express.Router()方法封装路由，封装路由可以让工程模块化。<br>建立一个router.js</p><pre><code class="js">const express=require(&#39;express&#39;)//express.Router()方法封装路由const router=express.Router()router.get(&#39;/login&#39;,(req,res)=&gt;{    res.send(&quot;this is login&quot;)})router.get(&#39;/register&#39;,(req,res)=&gt;{    res.send(&quot;this is register&quot;)})//导出routermodule.exports=router</code></pre><p>main.js</p><pre><code class="js">const express=require(&#39;express&#39;)//引入路由const userRouter=require(&#39;./router&#39;)const app=express()//中间件，路径为/user进入封装好的路由app.use(&#39;/user&#39;,userRouter)app.listen(9595,()=&gt;{   console.log(&#39;Server Start&#39;)})//访问http://localhost:9595/user/login 显示this is login//访问http://localhost:9595/user/register,显示this is register</code></pre><p>3.第三方中间件<br>上文中使用body-parser插件就是第三方中间件的用法</p><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><p>安装mysql依赖</p><pre><code>npm install mysql</code></pre><p>数据库连接</p><pre><code class="js">var mysql = require(&#39;mysql&#39;);var connection = mysql.createConnection({    host: &#39;localhost&#39;,//主机地址 （默认：localhost）    user: &#39;root&#39;,//用户名    password: &#39;logan123&#39;,//密码    database: &#39;testDB&#39;//数据库名});//连接数据库connection.connect((err) =&gt; {    if (err) throw err    console.log(&#39;数据库连接成功&#39;)});//断开数据库connection.end();</code></pre><p><a href="https://img-blog.csdnimg.cn/20191031170408604.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" target="_blank" rel="noopener">更多配置</a></p><p>sql语句操作。<br>具体的sql语句的用法这边不做讲解，以查询数据和插入数据为例。<br>user数据表<br><img src="https://img-blog.csdnimg.cn/20191031171304134.png" alt="在这里插入图片描述"></p><pre><code class="js">var mysql = require(&#39;mysql&#39;);var connection = mysql.createConnection({    host: &#39;localhost&#39;,//主机地址 （默认：localhost）    user: &#39;root&#39;,//用户名    password: &#39;******&#39;,//密码    database: &#39;testDB&#39;//数据库名});//连接数据库connection.connect((err) =&gt; {    if (err) throw err    console.log(&#39;数据库连接成功&#39;)});connection.query(&quot;select * from user&quot;,(err, result)=&gt;{    if(err) throw err    console.log(result)})connection.query(&quot;insert into user values(4,&#39;rose&#39;,&#39;789654&#39;)&quot;,(err, result)=&gt;{    if(err) throw err    console.log(result)})//断开数据库connection.end();</code></pre><p>执行结果<br><img src="https://img-blog.csdnimg.cn/20191031172355949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>user表<br><img src="https://img-blog.csdnimg.cn/20191031172441166.png" alt="在这里插入图片描述"><br>防sql注入</p><pre><code class="js">var mysql = require(&#39;mysql&#39;);var connection = mysql.createConnection({    host: &#39;localhost&#39;,//主机地址 （默认：localhost）    user: &#39;root&#39;,//用户名    password: &#39;******&#39;,//密码    database: &#39;testDB&#39;//数据库名});//连接数据库connection.connect((err) =&gt; {    if (err) throw err    console.log(&#39;数据库连接成功&#39;)});let addsql=&quot;insert into user values(?,?,?)&quot;let addSqlParams = [4, &#39;rose&#39;,&#39;789654&#39;];connection.query(addsql,addSqlParams,(err, result)=&gt;{    if(err) throw err    console.log(result)})//断开数据库connection.end();</code></pre><h1 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h1><p> cors模块</p><p> express中可用cors来解决跨域问题<br>安装方法</p><pre><code>npm install cors</code></pre><p>使用</p><pre><code class="js">const cors=require(&#39;cors&#39;)const app=express()app.use(cors())</code></pre><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>安装multer模块</p><pre><code>npm install multer</code></pre><p>配置storage(磁盘存储引擎)</p><pre><code class="js">const storage = multer.diskStorage({    destination: (req, file, cb) =&gt; {        //cb第二个参数为存储的路径        cb(null, &#39;./upload&#39;)    },    filename: (req, file, cb) =&gt; {        //cb第二个参数为文件的名字        cb(null, file.originalname)    }})</code></pre><p>实例化multer</p><pre><code class="js">const upload = multer({    storage: storage});</code></pre><p>post方法使用</p><pre><code class="js">//.single为单个文件上传。键名为&#39;key&#39;app.post(&#39;/upload&#39;, upload.single(&#39;key&#39;), (req, res) =&gt; {    res.send(&#39;ok&#39;);})</code></pre><p>优化代码<br>1.设置上传文件大小数量限制</p><pre><code class="js">const uploadConfig = multer({    limits:{        fileSize: 50*1024,        //上传文件数        files: 5,    } }//若文件大小不正确，则会抛出一个错误</code></pre><p>2.设置文件上传类型</p><pre><code class="js">const uploadConfig = multer({    limits:{        fileSize: 50*1024,        files: 5    },    fileFilter:(req,file,cb)=&gt;{        if(file.mimetype == &#39;image/jpeg&#39;||file.mimetype == &#39;image/jpg&#39;){            cb(null, true)        } else {            cb(null, false)            //抛出一个错误            cb(new Error())        }    }})//这里若文件类型不正确，则不会接收，但是不会抛出错误,所以需要手动抛出一个错误</code></pre><p>完整代码</p><pre><code class="js">const uploadConfig = multer({    limits: {        fileSize: 100*1024,        files: 5    },    storage: multer.diskStorage({        destination: (req, file, cb) =&gt; {            //cb第二个参数为存储的路径            cb(null, &#39;./upload&#39;)        },        filename: (req, file, cb) =&gt; {            //截取文件的后缀名            let exts = file.originalname.split(&#39;.&#39;)            //取最后一个元素            let ext = exts[exts.length - 1]            //文件名为时间戳加上4个随机数字            let filename = (new Date()).getTime()            let randnum = parseInt(1000 + Math.random() * 8999)            cb(null, `${filename}${randnum}.${ext}`)        }    }),    fileFilter: (req, file, cb) =&gt; {        if (file.mimetype == &#39;image/jpg&#39; || file.mimetype == &#39;image/jpeg&#39;) {            cb(null, true)        } else {            cb(null, false)            //抛出一个错误            cb(new Error())        }    }})let upload = uploadConfig.single(&#39;key&#39;)app.post(&#39;/upload&#39;, (req, res) =&gt; {    upload(req, res, (err) =&gt; {        if (err instanceof multer.MulterError) {            return res.send(err.message)        } else if (err) {            //此处接收文件类型限制抛出的错误            return res.send(&quot;type error&quot;)        }        res.send(&quot;sucess&quot;)    })})</code></pre><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><p>JSON Web Token基于Token的身份验证<br>安装</p><pre><code>npm install jsonwebtoken</code></pre><p>生成token</p><blockquote><p>jwt.sign(payload, secretOrPrivateKey, [options, callback])</p></blockquote><p>payload-存储加密信息<br>secretOrPrivateKey-key,加密的钥匙<br>expiresIn-设置有效期，不带单位默认为秒。也可以是<a href="https://github.com/zeit/ms" target="_blank" rel="noopener">时间跨度字符串</a></p><pre><code class="js">let payload={    us:&#39;test&#39;,    ps:&#39;123456&#39;}let secretOrPrivateKey=&quot;dsadas&quot;jwt.sign(payload,secretOrPrivateKey, {expiresIn:60*60},(err,token)=&gt;{    if(err) throw err    console.log(token)})</code></pre><p>解密token</p><blockquote><p>jwt.verify(token, secretOrPublicKey, [options, callback])</p></blockquote><p>token-由jwt.sign生成的token<br>secretOrPrivateKey-加密的key，用于解析token的payload里的信息</p><pre><code class="js">let token=&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cyI6IjEyMyIsInBzIjoiMTIzIiwiaWF0IjoxNTc1MzQyNjI4LCJleHAiOjE1NzU0MjkwMjh9.Fk7w2zeve5NNLYRJpt3ErIR0INvpFgpdi_4oNr9xju0&quot;let secretOrPrivateKey=&quot;dsadas&quot;jwt.verify(token, secretOrPrivateKey, (err, data) =&gt;{    if(err.name===&quot;TokenExpiredError&quot;){        console.log(&quot;token过期&quot;)    }else if(err.name===&quot;TokenExpiredError&quot;){        console.log(&quot;无效的token&quot;)    }    else{        console.log(data)    }})</code></pre>]]></content>
    
    <summary type="html">
    
      node.js教程
    
    </summary>
    
      <category term="ht" scheme="/categories/ht/"/>
    
    
  </entry>
  
  <entry>
    <title>谷歌浏览器安装vue-devtools</title>
    <link href="/2019/09/09/qt/1567991928/"/>
    <id>/2019/09/09/qt/1567991928/</id>
    <published>2019-09-09T01:18:48.000Z</published>
    <updated>2020-06-11T02:57:18.397Z</updated>
    
    <content type="html"><![CDATA[<p>安装之前，确保有node环境</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p><a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">github下载地址</a><br>下载的方法有很多，这里就不一一叙述。如果不会git语法，最直接的方式就是点击clone or download下载zip到桌面解压。<br><img src="https://img-blog.csdnimg.cn/20190909092032784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>cd命令进入到vue-devtools-dev目录<br><img src="https://img-blog.csdnimg.cn/20190909092323565.png" alt="在这里插入图片描述"><br>运行npm install(也可使用淘宝镜像cnpm install)<br><img src="https://img-blog.csdnimg.cn/20190909093010142.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开vue-devtools-dev\shells\chrome这个目录下的manifest.json文件，将persistent中的false改为true<br><img src="https://img-blog.csdnimg.cn/20190909093801602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>运行npm run build(也可使用淘宝镜像cnpm run build)<br><img src="https://img-blog.csdnimg.cn/2019090909413913.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打开谷歌浏览器扩展程序<br>菜单-&gt;更多工具-&gt;扩展程序-&gt;加载已解压扩展程序<br><strong>未打开开发者模式的要在这个界面打开开发者模式<br><img src="https://img-blog.csdnimg.cn/20190909094455517.png" alt="在这里插入图片描述"><br>选择vue-devtools -&gt; shells -&gt; chrome文件夹<br><img src="https://img-blog.csdnimg.cn/20190909094740984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>此时安装完成<br><img src="https://img-blog.csdnimg.cn/20190909094836108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></strong>当然，如果你能够科学上网，在谷歌浏览器的插件市场直接搜索安装vue-devtools是最方便的。</p>]]></content>
    
    <summary type="html">
    
      vue-devtools
    
    </summary>
    
      <category term="qt" scheme="/categories/qt/"/>
    
    
  </entry>
  
  <entry>
    <title>git基础教程(更新中)</title>
    <link href="/2019/08/30/qt/1567158704/"/>
    <id>/2019/08/30/qt/1567158704/</id>
    <published>2019-08-30T09:51:44.000Z</published>
    <updated>2020-06-11T02:57:18.398Z</updated>
    
    <content type="html"><![CDATA[<h1 id="window下载和安装"><a href="#window下载和安装" class="headerlink" title="window下载和安装"></a>window下载和安装</h1><p><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">点击进入官网下载</a><br><img src="https://img-blog.csdnimg.cn/20190830151748657.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>下载完成后打开<br><img src="https://img-blog.csdnimg.cn/20190830151818618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190830151858161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190830152020772.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190830152031128.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190830152126626.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190830152407649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190830152456759.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190830152523595.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190830152535502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190830152558313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装完成后使用命令行或者GitBash输入用户名和邮箱<br><img src="https://img-blog.csdnimg.cn/20190830172420791.png" alt="在这里插入图片描述"><br>git config –list可查看所有配置信息<br><img src="https://img-blog.csdnimg.cn/2019083017251118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="git基础使用"><a href="#git基础使用" class="headerlink" title="git基础使用"></a>git基础使用</h1><h2 id="初始化git仓库"><a href="#初始化git仓库" class="headerlink" title="初始化git仓库"></a>初始化git仓库</h2><p>1.创建仓库<br>在要创建的目录右键Git Bash Here,打开命令窗口。输入$ mkdir <code>&lt;filename&gt;</code><br><img src="https://img-blog.csdnimg.cn/20190830154944401.png" alt="在这里插入图片描述"><br>2.初始化git<br>用cd 命名进入文件夹或者直接进入文件夹右键Git Bash Here<br>输入$ git int，此时在文件夹内创建了一个.git的文件夹<br><img src="https://img-blog.csdnimg.cn/20190830155140502.png" alt="在这里插入图片描述"><br>3.克隆仓库<br>$ git clone [url]<br><img src="https://img-blog.csdnimg.cn/20190830173543793.png" alt="在这里插入图片描述"></p><h2 id="把文件添加到版本库"><a href="#把文件添加到版本库" class="headerlink" title="把文件添加到版本库"></a>把文件添加到版本库</h2><p>1.把文件添加到仓库<br>$ git add  <code>&lt;filename&gt;</code><br>此时文件还未保存在仓库，需要提交后才能保存，这样可以保证能上传很多文件后在提交<br><strong>* $ git add –all提交所有文件包括删除没有的<br>2.把文件提交到仓库<br>$ git commit -m “”<br>m后面输入此次提交的描述信息，这样方面后续从历史记录里查找</strong>这里我新建了一个txt文件放在test目录下<br><img src="https://img-blog.csdnimg.cn/20190830160245136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="查看工作区状态"><a href="#查看工作区状态" class="headerlink" title="查看工作区状态"></a>查看工作区状态</h2><p>此时我们输入$ git status查看工作区状态<br><img src="https://img-blog.csdnimg.cn/20190830160936155.png" alt="在这里插入图片描述"><br>这里显示没有需要提交的修改，工作的目录是干净的<br>然后我们修改txt的内容，再次查看<br><img src="https://img-blog.csdnimg.cn/20190830161125840.png" alt="在这里插入图片描述"><br>提示文件被修改但是还没有准备提交<br>输入$ git diff查看修改的内容（全部，后面可接文件名）<br><img src="https://img-blog.csdnimg.cn/20190830161548494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>再次提交重复提交的两部</p><h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><p>1.查看历史记录<br>输入$ git log查看历史(第一项为版本号)<br><img src="https://img-blog.csdnimg.cn/20190830162236573.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.版本回退<br>$ git reset –hard HEAD^<br>当前版本表示HEAD，上一个版本加上^，依次加或者~加回退的版本数量，例如<code>HEAD~100</code> 回退到100版本前。<br><img src="https://img-blog.csdnimg.cn/20190830162653766.png" alt="在这里插入图片描述"><br>若想回到未来的版本，则在hard后添加部分版本号，系统会自动查找。<br><img src="https://img-blog.csdnimg.cn/20190830162910703.png" alt="在这里插入图片描述"><br>3.回退后查找新版本的版本号<br>输入git reflog记录内一次命令</p><p><img src="https://img-blog.csdnimg.cn/20190830163234270.png" alt="在这里插入图片描述"><br>4.放弃工作区的状态<br>当不想要新添加的内容又添加提交到仓库的内容时，可以通过$ git checkout –  <code>&lt;filename&gt;</code>放弃工作区的修改<br>在txt中随意添加一行<br><img src="https://img-blog.csdnimg.cn/201908301644045.png" alt="在这里插入图片描述"><br>此时还未使用添加命令，输入$ git checkout – test.txt<br>    <img src="https://img-blog.csdnimg.cn/20190830164558794.png" alt="在这里插入图片描述"></p><p>如果使用添加命令添加到暂存区，则使用git reset HEAD ，再使用$ git checkout恢复</p><p><img src="https://img-blog.csdnimg.cn/20190830165327474.png" alt="在这里插入图片描述"><br>4.删除命令<br>$ rm  <code>&lt;filename&gt;</code>删除文件<br>$ rm -rf <code>&lt;directory name&gt;</code>删除文件夹</p><h1 id="git标签"><a href="#git标签" class="headerlink" title="git标签"></a>git标签</h1><p>$ git tag v1.0 给最新一次提交打上（HEAD）”v1.0”的标签<br>若要添加描述信息，则$git tag -a tagName -m “”<br><img src="https://img-blog.csdnimg.cn/20190830174416791.png" alt="在这里插入图片描述"><br>给以前的版本打标签，则在后面添加部分版本号<br><img src="https://img-blog.csdnimg.cn/20190830174755605.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      git
    
    </summary>
    
      <category term="qt" scheme="/categories/qt/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6快速入门</title>
    <link href="/2019/08/30/qd/1567146678/"/>
    <id>/2019/08/30/qd/1567146678/</id>
    <published>2019-08-30T06:31:18.000Z</published>
    <updated>2020-06-11T02:57:11.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><p>const:声明的常量不可改变，声明时必须初始化</p><pre><code class="js">const pi =3.1415926;console.log(pi);</code></pre><p>使用const定义的数组和对象，其值是可变的，但是不能对其进行重新赋值</p><pre><code class="js">const a=[];a[0]=1;console.log(a[0]);//输出1const a=[1];//报错</code></pre><h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>let:let所声明的变量，只在let命令所在的代码块({}包裹的地方)内有效，let不能在相同的作用域重复申明<br>代码</p><pre><code class="js">for(var i=0;i&lt;5;i++){}console.log(i);for(let j=0;j&lt;5;j++){}console.log(j);</code></pre><p>输出<br>5<br>Uncaught ReferenceError: j is not defined</p><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>箭头函数相当于一个匿名函数，基本构造为</p><pre><code class="js">()=&gt;{}</code></pre><p>()相当于function(),如果传入的参数为1个，则可以省略()，但是没有括号的时候不能省略。<br>{}为函数体，若只含又一个表达式，则可以省略return和{}，若含有多条语句则都不能省略。</p><pre><code class="js">const a=x=&gt;x+1;console.log(a(1))const b=(a,b)=&gt;{    a=a+1;    b=b+2;    return a+b;}console.log(b(1,2))</code></pre><p>输出<br>2<br>6<br>注意:若但表达式返回的是一个对象，则要添加()，否则和函数体语法冲突</p><pre><code class="js">v =&gt; {k: v} // 错误v =&gt; ({k: v}) // 正确</code></pre><h2 id="箭头函数中的this和普通函数this的区别"><a href="#箭头函数中的this和普通函数this的区别" class="headerlink" title="箭头函数中的this和普通函数this的区别"></a>箭头函数中的this和普通函数this的区别</h2><p>普通函数中的this谁调用他，谁就是this<br>箭头函数本身没有this，只能沿着作用域链往上找，直到找到一个确定的this，如果找不到，那就是Windows或undefined</p><pre><code class="js">var a=2;var obj1={    a:1,    show:function() {        console.log(this.a);    }}obj1.show();//obj1条用的show,所以this指向obj1var obj2={    a:1,    show:()=&gt;console.log(this.a)}obj2.show();//箭头函数本身没有this，就沿着作用域往上找，找到最外层的作用域，window</code></pre><h1 id="参数配置"><a href="#参数配置" class="headerlink" title="参数配置"></a>参数配置</h1><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>在参数后面直接加=设置默认参数</p><pre><code class="js">const cul=(x=1,y=1,z=1)=&gt;x+y+z;console.log(cul(2,2,2));//输出6console.log(cul());//输出3</code></pre><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>…加变量名可作为一个可变化长度的参数数组传入函数中</p><pre><code class="js">const cul=(...n)=&gt;{    let sum=0;    n.forEach(item=&gt;{        sum=sum+item;    })    return sum;};console.log(cul(2,2,2));//输出6</code></pre><p>可用…加变量名合并数组</p><pre><code class="js">const b=[4,5]const a=[1,2,3,...b]console.log(a)</code></pre><h1 id="promise对象"><a href="#promise对象" class="headerlink" title="promise对象"></a>promise对象</h1><p><a href="https://blog.csdn.net/qq_41866776/article/details/102808353" target="_blank" rel="noopener">promise对象</a></p>]]></content>
    
    <summary type="html">
    
      es6
    
    </summary>
    
      <category term="qd" scheme="/categories/qd/"/>
    
    
  </entry>
  
  <entry>
    <title>less基本语法</title>
    <link href="/2019/08/20/qd/1566232486/"/>
    <id>/2019/08/20/qd/1566232486/</id>
    <published>2019-08-19T16:34:46.000Z</published>
    <updated>2020-06-11T02:57:18.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>less的注释有两种方式，一种为css用的/**/,这种注释的方法会被less所编译成css。另一种为//，这种不会被less所编译<br>less代码</p><pre><code class="css">/*会被编译*///不会被编译</code></pre><p>css输出代码</p><pre><code class="css">/*会被编译*/</code></pre><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>less中用@变量名:值的方法来生命变量<br>less代码</p><pre><code class="css">@test_width:100px;@test_color:red;.box{    width:@test_width ;    height:@test_width ;    background:@test_color ;}</code></pre><p>css输出代码</p><pre><code class="css">.box {  width: 100px;  height: 100px;  background: red;}</code></pre><h1 id="混入"><a href="#混入" class="headerlink" title="混入"></a>混入</h1><p>可以将定义好的样式引入到另一个样式中，类似于函数的调用<br>less代码</p><pre><code class="css">//这里是没带参数的嵌套.addradius(){    border-radius: 10px;}//这里是带参数的嵌套.addboder(@test_color){    border: 1px solid @test_color;}//这里是带默认值的参数嵌套,keyi1.addmargin(@v:10px){    margin: @v;}.box{    width:100px;    height:100px ;    background:red;    .addradius;    .addboder(red);    .addmargin;}</code></pre><p>css输出代码</p><pre><code class="css">.box {  width: 100px;  height: 100px ;  background: red;  border-radius: 10px;  border: 1px solid red;  margin: 10px;}</code></pre><h1 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h1><p>相当于条件判断，只有满足条件才匹配<br>less代码</p><pre><code class="css">//括号内的不带符号的参数代表条件.pos(r){    position: relative;}.pos(a){    position: absolute;}.pos(f){    position: fixed;}.box{    .pos(a);}</code></pre><p>css输出代码</p><pre><code class="css">.box {  position: absolute;}</code></pre><h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><p>less里的变量可以直接进行运算<br>less代码</p><pre><code class="css">@lenght:100px;//减法的变量之间一定要有空格.box{    width: (@lenght + 20)/4;    height: @lenght - 20*3;}</code></pre><p>css输出代码</p><pre><code class="css">.box {  width: 30px;  height: 40px;}</code></pre><h1 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h1><p>可以实现多层嵌套以及多个关系嵌套<br>less代码</p><pre><code class="css">ul{    list-style: none;    width: 100px;    li{        height: 20px;        a{            background: red;            //&amp;相当于上一个选择器            &amp;:hover{                background: blue;            }        }    }    &gt;.left{        float: left;        width: 10px;        height: 10px;        background-color: red;    }    .right{        float: right;        width: 10px;        height: 10px;        background-color: red;    }}</code></pre><p>css输出代码</p><pre><code class="css">ul {  list-style: none;  width: 100px;}ul li {  height: 20px;}ul li a {  background: red;}ul li a:hover {  background: blue;}ul &gt; .left {  float: left;  width: 10px;  height: 10px;  background-color: red;}ul .right {  float: right;  width: 10px;  height: 10px;  background-color: red;}</code></pre><h1 id="arguments"><a href="#arguments" class="headerlink" title="@arguments"></a>@arguments</h1><p>@arguments包含所有变量<br>less代码</p><pre><code class="css">.addborder(@l:1px,@s:solid,@c:red){    border: @arguments;}.box{    .addborder();}</code></pre><p>css输出代码</p><pre><code class="css">.box {  border: yellow solid red;}</code></pre>]]></content>
    
    <summary type="html">
    
      less基本语法
    
    </summary>
    
      <category term="qd" scheme="/categories/qd/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue教程</title>
    <link href="/2019/08/05/qd/1564969377/"/>
    <id>/2019/08/05/qd/1564969377/</id>
    <published>2019-08-05T01:42:57.000Z</published>
    <updated>2020-06-11T02:57:18.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue安装与使用"><a href="#Vue安装与使用" class="headerlink" title="Vue安装与使用"></a>Vue安装与使用</h1><p>1.使用cdn</p><pre><code class="html">&lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;or&lt;script src=&quot;https://unpkg.com/vue/dist/vue.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>2.官网下载<br><a href="https://vuejs.org/v2/guide/installation.html" target="_blank" rel="noopener">进入英文官网</a><br><img src="https://img-blog.csdnimg.cn/20190621102352813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>第一个为开发版本，包含完整的警告和调试模式</li><li>第二个为生产版本，压缩了代码，删除了警告</li></ul><p>根据自己的需求下载合适的版本，需要注意的是中文的官网点击下载出现的是源码<br>在html文件中用script标签直接引入Vue就可使用</p><h1 id="Vue起步"><a href="#Vue起步" class="headerlink" title="Vue起步"></a>Vue起步</h1><h2 id="Vue基本结构"><a href="#Vue基本结构" class="headerlink" title="Vue基本结构"></a>Vue基本结构</h2><p>每个 Vue 应用都需要通过实例化 Vue 来实现</p><blockquote><p>var vm = new Vue()</p></blockquote><p>Vue构造器基本的参数</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>el</td><td>表示当前new的这个vue的实例，即要控制哪个区域</td></tr><tr><td>data</td><td>用于定义属性，当属性改变时，html的内容也发生改变，不需要手动操作DOM元素</td></tr><tr><td>methods</td><td>用于定义函数</td></tr></tbody></table><p>html代码</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;p&gt;{{msg}}&lt;/p&gt;    &lt;p&gt;{{show()}}&lt;/p&gt;&lt;/div&gt;</code></pre><p>js代码</p><pre><code class="js">var vm=new Vue({    el:&quot;#app&quot;,    data:{        msg:&#39;Hello&#39;    },    methods:{        show:function(){            return &#39;World&#39;        }    }    })</code></pre><p>输出结果：<br><img src="https://img-blog.csdnimg.cn/20190621110048450.png" alt="在这里插入图片描述"></p><h2 id="Vue基本指令"><a href="#Vue基本指令" class="headerlink" title="Vue基本指令"></a>Vue基本指令</h2><h3 id="123-123-nbsp-125-125-和v-cloak"><a href="#123-123-nbsp-125-125-和v-cloak" class="headerlink" title="&#123;&#123;&nbsp;&#125;&#125;和v-cloak"></a>&#123;&#123;&nbsp;&#125;&#125;和v-cloak</h3><p>&#123;&#123;&nbsp;&#125;&#125;插值表达式的作用：用于输出对象属性和函数返回值<br>v-cloak作用：解决插值表达式闪烁的问题，即在为了防止出现Vue的变量名，在DOM染完成后才显示<br>用法：<br>html:</p><pre><code class="html">&lt;p v-cloak&gt;{{msg}}&lt;/p&gt;</code></pre><p>css</p><pre><code class="css">[v-cloak]{     display: none;}</code></pre><h3 id="v-text-和-v-html"><a href="#v-text-和-v-html" class="headerlink" title="v-text 和 v-html"></a>v-text 和 v-html</h3><p>默认的v-text是没有闪烁的，和插值表达式的不同是v-text会覆盖元素中原本的内容，但是插值表达式只会替换自己的占位符，而不会把整个元素的内容清空</p><pre><code class="html">       &lt;p v-text=&quot;msg&quot;&gt;haha&lt;/p&gt;</code></pre><p>  输出结果：Hello<br> 使用 v-html 指令用于输出 html 代码    </p><h3 id="v-bind-和-v-on"><a href="#v-bind-和-v-on" class="headerlink" title="v-bind 和 v-on"></a>v-bind 和 v-on</h3><p>v-bind用于绑定属性，简写 :<br>v-on用于绑定方法，简写 @<br>代码示例</p><pre><code class="html">    &lt;div id=&quot;app&quot;&gt;            &lt;input type=&quot;text&quot; v-bind:value=&quot;val&quot;/&gt;            &lt;br/&gt;            &lt;span v-on:mouseover=&quot;show()&quot;&gt;鼠标移到这&lt;/span&gt;        &lt;/div&gt;    &lt;script&gt;        var vm = new Vue({            el: &quot;#app&quot;,            data: {                val:&quot;这里绑定了输入框的值&quot;            },            methods: {                show: function() {                    alert(&quot;移到这了！&quot;)                }            }        })    &lt;/script&gt;</code></pre><p>  输出结果：<br>  <img src="https://img-blog.csdnimg.cn/2019062309554384.png" alt="在这里插入图片描述"></p><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>v-model 指令用来在 input、select、textarea、checkbox、radio 等表单控件元素上创建双向数据绑定，根据表单上的值，自动更新绑定的元素的值。</p><pre><code class="html">  &lt;div id=&quot;app&quot;&gt;        &lt;p&gt;{{msg}}&lt;/p&gt;        &lt;input v-model=&quot;msg&quot;&gt;  &lt;/div&gt;  &lt;script&gt;        var vm = new Vue({            el: &quot;#app&quot;,            data: {                msg: &quot;绑定&quot;            }        })    &lt;/script&gt;</code></pre><p><a href="https://cn.vuejs.org/v2/guide/forms.html" target="_blank" rel="noopener">查看更多示例</a></p><h2 id="Vue绑定样式"><a href="#Vue绑定样式" class="headerlink" title="Vue绑定样式"></a>Vue绑定样式</h2><p>例:</p><pre><code class="css">.color{    color: #ffffff;}.bkcolor{    background-color: #ff0000;.size{    font-size: 20px;}</code></pre><p>:class为v-bind:class的简写<br>1.使用数组绑定</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;h1 :class=&quot;[&#39;color&#39;,&#39;bkcolor&#39;,&#39;size&#39;]&quot;&gt;这是一个用Vue绑定样式的标题&lt;/h1&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue({        el: &quot;#app&quot;,        //也可将数组的内容写在data域里    })&lt;/script&gt;</code></pre><p>结果：<br><img src="https://img-blog.csdnimg.cn/20190623101329797.png" alt="在这里插入图片描述"><br>2.数组中使用三元表达式或者镶嵌对象</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;h1 :class=&quot;[flag?&#39;color&#39;:&#39;&#39;,&#39;bkcolor&#39;,&#39;size&#39;]&quot;&gt;这是一个用Vue绑定样式的标题1&lt;/h1&gt;    &lt;h1 :class=&quot;[&#39;color&#39;,&#39;bkcolor&#39;,{&#39;size&#39;:flag}]&quot;&gt;这是一个用Vue绑定样式的标题2&lt;/h1&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue({        el: &quot;#app&quot;,        data:{            flag:false            //也可将数组内容写在data区域        }    })&lt;/script&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20190623101836757.png" alt="在这里插入图片描述"><br>3.使用对象</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;h1 :class=&quot;h_class&quot;&gt;这是一个用Vue绑定样式的标题&lt;/h1&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue({        el: &quot;#app&quot;,        data:{            h_class:{                color:true,                bkcolor:true,                size:false            }        }    })&lt;/script&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20190623102210816.png" alt="在这里插入图片描述"><br>4.使用:style(v-bind:style)内联样式</p><h2 id="Vue循环指令"><a href="#Vue循环指令" class="headerlink" title="Vue循环指令"></a>Vue循环指令</h2><p>循环使用 v-for 指令<br>1.迭代数组</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;span v-for=&quot;item in arr&quot;&gt;{{item}}&lt;/span&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue({        el: &quot;#app&quot;,        data:{            arr:[1,2,3,4,5]        }    })&lt;/script&gt;</code></pre><p>结果：<br><img src="https://img-blog.csdnimg.cn/20190623103500108.png" alt="在这里插入图片描述"></p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;span v-for=&quot;item,i in arr&quot;&gt;{{i}}=&gt;{{item}}&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue({        el: &quot;#app&quot;,        data:{            arr:[1,2,3,4,5]        }    })&lt;/script&gt;</code></pre><p>结果：<br><img src="https://img-blog.csdnimg.cn/2019062310361029.png" alt="在这里插入图片描述"><br>2.迭代对象中的属性</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;span v-for=&quot;item in arr&quot;&gt;{{item.id}}=&gt;{{item.name}}&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue({        el: &quot;#app&quot;,        data:{            arr:[                {id:1,name:&#39;ls1&#39;},                {id:2,name:&#39;ls2&#39;},                {id:2,name:&#39;ls3&#39;}            ]        }    })&lt;/script&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20190623104154310.png" alt="在这里插入图片描述"></p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;span v-for=&quot;item,i in arr&quot;&gt;{{i}}=&gt;{{item.id}}=&gt;{{item.name}}&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue({        el: &quot;#app&quot;,        data:{            arr:[                {id:1,name:&#39;ls1&#39;},                {id:2,name:&#39;ls2&#39;},                {id:2,name:&#39;ls3&#39;}            ]        }    })&lt;/script&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20190623104231158.png" alt="在这里插入图片描述"></p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;span v-for=&quot;val,key in obj&quot;&gt;{{key}}=&gt;{{val}}&amp;nbsp;&lt;/span&gt;    &lt;!--可以有第三个值，索引--&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue({        el: &quot;#app&quot;,        data:{            obj:{                id:123456,                name:&quot;zs&quot;,                sex:&quot;M&quot;            }        }    })&lt;/script&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20190623104626985.png" alt="在这里插入图片描述"><br>3.迭代数字</p><p>迭代数字从1开始</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;span v-for=&quot;count in 5&quot;&gt;{{count}}&lt;/span&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue({        el: &quot;#app&quot;,        data:{}    })&lt;/script&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20190623104834158.png" alt="在这里插入图片描述"></p><h2 id="Vue条件语句"><a href="#Vue条件语句" class="headerlink" title="Vue条件语句"></a>Vue条件语句</h2><p>v-if：每次都会重新创建或者删除元素<br>v-show：不会重新进行对DOM删除或者创建，只是切换了元素的display:none的属性<br>v-if有更高的切换消耗v-show有更高的初始渲染消耗，因此如果需要频繁切换v-show较好，如果运行条件不大可能改变v-if更好</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;span v-if=&quot;hasinfor&quot;&gt;您已登陆&lt;/span&gt;    &lt;!--v-else-if用于多重判断--&gt;    &lt;span v-else=&quot;hasinfor&quot;&gt;请登录登陆&lt;/span&gt;    &lt;span v-show=&quot;hasinfor&quot;&gt;您已登陆&lt;/span&gt;    &lt;span v-show=&quot;!hasinfor&quot;&gt;请登录登陆&lt;/span&gt;&lt;/div&gt;&lt;script&gt;    var vm = new Vue({        el: &quot;#app&quot;,        data:{            hasinfor:false        }    })&lt;/script&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/2019062311004630.png" alt="在这里插入图片描述"></p><h2 id="Vue过滤器"><a href="#Vue过滤器" class="headerlink" title="Vue过滤器"></a>Vue过滤器</h2><p>可被用作一些常见文本格式化，可在mustachc插值和v-bind表达式<br>过滤器调用格式</p><pre><code class="html">{{name|过滤器名称}}</code></pre><p>全局过滤器的使用</p><pre><code class="js">Vue.filter(&#39;过滤器名称&#39;,function(){})</code></pre><p>私有过滤器的使用</p><pre><code class="js">filters:{    过滤器名称:function(){}}</code></pre><p>例子：</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;p&gt;{{msg|msgFormat}}&lt;/p&gt;&lt;/div&gt;&lt;script&gt;    Vue.filter(&#39;msgFormat&#39;,function(msg){        return msg.replace(&#39;邪恶&#39;,&#39;单纯&#39;)    })    var vm = new Vue({        el: &quot;#app&quot;,        data:{            msg:&quot;他是一个邪恶的男孩&quot;        }    })&lt;/script&gt;/*****私有过滤器的使用方法var vm = new Vue({    el: &quot;#app&quot;,    data:{        msg:&quot;他是一个邪恶的男孩&quot;    },    filters:{        msgFormat:function(msg){            return msg.replace(&#39;邪恶&#39;,&#39;单纯&#39;)        }    }})*****/</code></pre><p>输出：他是一个单纯的男孩</p><h2 id="Vue按键修饰符"><a href="#Vue按键修饰符" class="headerlink" title="Vue按键修饰符"></a>Vue按键修饰符</h2><p>Vue 允许为 v-on 在监听键盘事件时添加按键修饰符</p><pre><code class="html">&lt;!--在输入框绑定回车事件submit--&gt;&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;</code></pre><p>Vue 提供了绝大多数常用的按键码的别名</p><ul><li>enter</li><li>tab</li><li>delete (捕获“删除”和“退格”键)</li><li>esc</li><li>space</li><li>up</li><li>down</li><li>left</li><li>right</li></ul><p>可以通过全局 config.keyCodes 对象自定义按键修饰符别名</p><pre><code class="js">// 可以使用v-on:keyup.f1,112为f1的键码Vue.config.keyCodes.f1 = 112</code></pre><h2 id="Vue自定义指令"><a href="#Vue自定义指令" class="headerlink" title="Vue自定义指令"></a>Vue自定义指令</h2><p>对普通 DOM 元素进行底层操作，这时候就会用到自定义指令</p><p>自定义指令使用方法：</p><pre><code class="html">v-指令名称</code></pre><p>全局自定义指令的注册</p><pre><code class="js">Vue.directive(&#39;指令名称&#39;,{    //第二个参数为一个对象，包括不同的钩子函数，常用bind,inserted,update    bind:function(){},    inserted:function(){},    update:function(){}})</code></pre><p>局部自定义指令的注册</p><pre><code class="js">directives:{    指令名称:{        bind:function(){},        inserted:function(){},        update:function(){}    }    }</code></pre><p>例子：</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;p v-color&gt;测试文字&lt;/p&gt;&lt;/div&gt;&lt;script&gt;    Vue.directive(&#39;color&#39;,{    bind:function(el){        el.style.color=&quot;red&quot;;//el是直接对dom元素进行操作        }    })&lt;/script&gt;/*****私有指令的使用方法var vm = new Vue({    el: &quot;#app&quot;,        data:{},    directives:{        color:{            bind:function(el){                el.style.color=&quot;red&quot;;            }        }    }})*****/</code></pre><p>钩子函数<br>|函数名称| 作用 |<br>|–|–|<br>| bind | 只调用一次，指令第一次绑定到元素时调用 |<br>| inserted | 被绑定元素插入父节点时调用 |<br>| update | 所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前 |<br>| componentUpdated | 指令所在组件的 VNode 及其子 VNode 全部更新后调用|<br>| unbind | 只调用一次，指令与元素解绑时调用|</p><p>钩子函数参数- el：指令所绑定的元素，可以用来直接操作 DOM 。</p><ul><li>binding：一个对象，包含以下属性：<ul><li>name：指令名，不包括 v- 前缀。</li><li>value：指令的绑定值，例如：v-my-directive=”1 + 1” 中，绑定值为 2。</li><li>oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li><li>expression：字符串形式的指令表达式。例如 v-my-directive=”1 + 1” 中，表达式为 “1 + 1”。</li><li>arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 “foo”。</li><li>modifiers：一个包含修饰符的对象。例如：v-my-directive.foo.bar 中，修饰符对象为 { foo: true, bar: true }。</li></ul></li><li>vnode：Vue 编译生成的虚拟节点。</li><li>oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li></ul><pre><code class="html">&lt;div id=&quot;app&quot; v-demo:foo.a.b=&quot;message&quot;&gt;&lt;/div&gt;&lt;script&gt;    Vue.directive(&#39;demo&#39;, {        bind: function(el, binding){            el.innerHTML =                &#39;name: &#39; + binding.name + &#39;&lt;br&gt;&#39; +                &#39;value: &#39; + binding.value + &#39;&lt;br&gt;&#39; +                &#39;expression: &#39; + binding.expression + &#39;&lt;br&gt;&#39; +                &#39;argument: &#39; + binding.arg + &#39;&lt;br&gt;&#39; +                &#39;modifiers: &#39; + JSON.stringify(binding.modifiers) + &#39;&lt;br&gt;&#39;             }    })    var vm = new Vue({        el: &quot;#app&quot;,        data: {            message:&quot;hello&quot;        },    })&lt;/script&gt;</code></pre><p>输出结果：<br><img src="https://img-blog.csdnimg.cn/20190728102304489.png" alt="在这里插入图片描述"></p><h2 id="Vue监听属性"><a href="#Vue监听属性" class="headerlink" title="Vue监听属性"></a>Vue监听属性</h2><p>可以通过 watch 来响应数据的变化<br>格式：</p><pre><code class="js">watch:{        监听的属性:function (newvalue,oldvalue) {}        }</code></pre><p>例子:</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    请输入姓：&lt;input type=&quot;text&quot; v-model=&quot;fistname&quot; /&gt;&lt;br /&gt;    请输入名：&lt;input type=&quot;text&quot; v-model=&quot;lastname&quot; /&gt;&lt;br /&gt;    姓名：&lt;span&gt;{{fullname}}&lt;/span&gt;    &lt;p&gt;{{log}}&lt;/p&gt;&lt;/div&gt;&lt;script&gt;    var vue = new Vue({        el: &#39;#app&#39;,        data:{            fistname:&#39;&#39;,            lastname:&#39;&#39;,            fullname:&#39;&#39;,            log:&#39;&#39;        },        watch:{            &#39;fistname&#39;:function () {                this.fullname=this.fistname+this.lastname;            },            &#39;lastname&#39;:function () {                this.fullname=this.fistname+this.lastname;            },            &#39;fullname&#39;:function (newname,oldname) {                this.log=&#39;您的姓名由&#39;+oldname+&#39;改成&#39;+newname;            },        }    })&lt;/script&gt;    </code></pre><h2 id="Vue计算属性"><a href="#Vue计算属性" class="headerlink" title="Vue计算属性"></a>Vue计算属性</h2><p>计算属性关键词: computed<br>计算属性的本质就是一个方法，只不过，在使用这些计算属性的时候，是把他们的名称直接当作属性使用，并不会当作方法<br>可以使用 methods 来替代 computed，但是 computed 是基于它的依赖缓存，只有相关依赖发生改变时才会重新取值。而使用 methods ，在重新渲染的时候，函数总会重新调用执行。使用 computed 性能会更好，但不希望缓存，可以使用 methods 属性</p><pre><code class="js">var vue = new Vue({    el: &#39;#app&#39;,    computed:{    }})</code></pre><h1 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h1><p>生命周期钩子=生命周期函数=生命周期事件</p><h2 id="图示："><a href="#图示：" class="headerlink" title="图示："></a>图示：</h2><p><img src="https://img-blog.csdnimg.cn/20190728132431346.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><table><thead><tr><th>生命周期钩子</th><th>详情</th><th>应用</th></tr></thead><tbody><tr><td>beforeCreate</td><td>在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用，不能访问到data以及methods等</td><td>初始化非响应式变量</td></tr><tr><td>created</td><td>实例已经创建完成之后被调用。可访问data以及methods等，未挂载DOM,不能访问$el</td><td>简单的ajax请求以及页面的初始化</td></tr><tr><td>beforeMount</td><td>在挂载开始之前被调用，可访问到$el</td><td></td></tr><tr><td>mounted</td><td>挂载到实例上去之后调用该钩子</td><td>常用于获取VNode信息和操作，ajax请求</td></tr><tr><td>beforeUpdate</td><td>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前</td><td>更新之前访问现有的DOM，手动移除已添加的事件监听器</td></tr><tr><td>updated</td><td>虚拟 DOM 重新渲染和打补丁之后调用</td><td>避免在这个钩子函数中操作数据，可能陷入死循环</td></tr><tr><td>beforeDestroy</td><td>实例销毁之前调用。在这一步，实例仍然完全可用。</td><td>常用于销毁定时器、解绑全局事件、销毁插件对象等操作</td></tr><tr><td>destroyed</td><td>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</td></tr></tbody></table><h1 id="Vue-ajax"><a href="#Vue-ajax" class="headerlink" title="Vue ajax"></a>Vue ajax</h1><p>Vue.js 2.0 版本推荐使用 axios 来完成 ajax 请求<br>Axios 是一个基于 Promise 的 HTTP 库，可以用在浏览器和 node.js 中</p><h2 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h2><p>1.使用cdn</p><pre><code class="html">&lt;script src=&quot;https://unpkg.com/axios/dist/axios.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>2.使用npm</p><pre><code>$ npm install axios</code></pre><h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><p>示例：</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&lt;script&gt;    var vue = new Vue({        el: &#39;#app&#39;,        mounted() {            axios                .get(url)//url地址                .then(function(response){                    console.log(response.data);                })//.then为请求数据成功后的函数                .catch(function(error) {                    console.log(error);                });//.catch为请求数据失败后的函数        }    })&lt;/script&gt;    </code></pre><p>get传参</p><pre><code class="html">1.在url上拼接参数axios    .get(url+&#39;?key1=value1&amp;key2=value2&#39;)2.使用params传参axios    .get(url,{        params:{            key1:value1,            key2:value2        }    })</code></pre><h2 id="post方法"><a href="#post方法" class="headerlink" title="post方法"></a>post方法</h2><pre><code class="html">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&lt;script&gt;    var vue = new Vue({        el: &#39;#app&#39;,        mounted() {            axios                .post(url)//url地址                .then(function(response){                    console.log(response.data);                })//.then为请求数据成功后的函数                .catch(function(error) {                    console.log(error);                });//.catch为请求数据失败后的函数        }    })&lt;/script&gt;    </code></pre><p>post传参</p><pre><code class="html">axios    .post(url,{        key1:value1,//第一个参数        key2:value2//第二个参数    })</code></pre><h2 id="axios-API"><a href="#axios-API" class="headerlink" title="axios API"></a>axios API</h2><p>可以通过向 axios 传递相关配置来创建请求</p><pre><code class="html">&lt;script&gt;    var vue = new Vue({        el: &#39;#app&#39;,        mounted() {            axios({                    method: &#39;get&#39;,                    url:url,                    params:{                        key:value                    }                })//config配置，具体见下文                .then(function(response){                    console.log(response.data);                })//.then为请求数据成功后的函数                .catch(function(error) {                    console.log(error);                });//.catch为请求数据失败后的函数        }    })&lt;/script&gt;    </code></pre><p>请求方法别名<br>在使用别名方法时， url、method、data 这些属性都不必在配置中指定。</p><pre><code>axios.request(config)axios.get(url[, config])axios.delete(url[, config])axios.head(url[, config])axios.post(url[, data[, config]])axios.put(url[, data[, config]])axios.patch(url[, data[, config]])</code></pre><p>例如：</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;&lt;script&gt;    var vue = new Vue({        el: &#39;#app&#39;,        mounted() {            axios                .get(url,{                    //此处对config里的参数进行配置                    //与请求一起发送的 URL 参数                    params:{                        key=value                    },                    //指定请求超时的毫秒数                    timeout:1000,                })//url地址                .then(function(response){                    console.log(response.data);                })//.then为请求数据成功后的函数                .catch(function(error) {                    console.log(error);                });//.catch为请求数据失败后的函数        }    })&lt;/script&gt;    </code></pre><p>axios响应结构</p><pre><code>{  // `data` 由服务器提供的响应  data: {},  // `status`  HTTP 状态码  status: 200,  // `statusText` 来自服务器响应的 HTTP 状态信息  statusText: &quot;OK&quot;,  // `headers` 服务器响应的头  headers: {},  // `config` 是为请求提供的配置信息  config: {}}</code></pre><p>默认配置<br>1.默认全局配置</p><pre><code>axios.defaults.baseURL = 主目录url;</code></pre><p>2.自定义的实例默认设置</p><pre><code>var instance = axios.create({        baseURL: 主目录url,        timeout:1000    });    instance        .get(&#39;/下一级目录&#39;)//修改instance.defaults.baseURL = url;</code></pre><h2 id="config配置"><a href="#config配置" class="headerlink" title="config配置"></a>config配置</h2><p><a href="https://blog.csdn.net/qq_41866776/article/details/98478632" target="_blank" rel="noopener">点击此处</a></p><h1 id="Vue动画"><a href="#Vue动画" class="headerlink" title="Vue动画"></a>Vue动画</h1><h2 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h2><pre><code class="html">&lt;transtion&gt;    &lt;!--变化的DOM--&gt;&lt;/transtion&gt;</code></pre><h2 id="过渡的类名"><a href="#过渡的类名" class="headerlink" title="过渡的类名"></a>过渡的类名</h2><p>即用相应类名的css控制变化前后以及变化的时长<br><img src="https://img-blog.csdnimg.cn/20190805162755567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>|类名| 作用 |<br>|–|–|<br>| v-enter | 定义进入过渡的开始状态。在元素被插入之前生效，在元素被插入之后的下一帧移除 |<br>| v-enter-active | 定义进入过渡生效时的状态。在整个进入过渡的阶段中应用，在元素被插入之前生效，在过渡/动画完成之后移除。这个类可以被用来定义进入过渡的过程时间，延迟和曲线函数 |<br>| v-enter-to |  2.1.8版及以上 定义进入过渡的结束状态。在元素被插入之后下一帧生效 (与此同时 v-enter 被移除)，在过渡/动画完成之后移除 |<br>| v-leave | 定义离开过渡的开始状态。在离开过渡被触发时立刻生效，下一帧被移除 |<br>| v-leave-active | 定义离开过渡生效时的状态。在整个离开过渡的阶段中应用，在离开过渡被触发时立刻生效，在过渡/动画完成之后移除。这个类可以被用来定义离开过渡的过程时间，延迟和曲线函数。 |<br>| v-leave-to |  2.1.8版及以上 定义离开过渡的结束状态。在离开过渡被触发之后下一帧生效 (与此同时 v-leave 被删除)，在过渡/动画完成之后移除 |<br>***如果transition没有指定name属性的值，默认类名为上表的类名，即v-(如v-enter)，如果指定了name的值，则类名为：name的值-(如name=”fade”,类名为fade-enter)<br>例子：<br>css</p><pre><code class="css">/*默认的transition*/.v-enter,.v-leave-to{    opacity: 0;    transform: translateX(100px);}.v-enter-active,.v-leave-active{    transition: all 0.8s linear;}/*指定name属性的transition*/.fade-enter,.fade-leave-to{    opacity: 0;    transform: translateY(100px);}.fade-enter-active,.fade-leave-active{    transition: all 1s linear;}</code></pre><p>html</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;div&gt;        &lt;input type=&quot;button&quot; value=&quot;h1变化&quot; @click=&quot;flag1=!flag1&quot;/&gt;        &lt;transition&gt;            &lt;h1 v-if=&quot;flag1&quot;&gt;这是一个可以变化的h1&lt;/h1&gt;        &lt;/transtion&gt;    &lt;/div&gt;    &lt;div&gt;        &lt;input type=&quot;button&quot; value=&quot;h2变化&quot; @click=&quot;flag2=!flag2&quot;/&gt;        &lt;transition name=&quot;fade&quot;&gt;        &lt;h2 v-if=&quot;flag2&quot;&gt;这是一个可以变化的h2&lt;/h2&gt;        &lt;/transition&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script&gt;    var vue = new Vue({        el: &#39;#app&#39;,        data:{            flag1:false,            flag2:false        }    })&lt;/script&gt;</code></pre><h2 id="自定义过渡类名"><a href="#自定义过渡类名" class="headerlink" title="自定义过渡类名"></a>自定义过渡类名</h2><p>自定义过渡的类名优先级高于普通的类名，这样就能很好的与第三方（如：animate.css）的动画库结合使用</p><ul><li>enter-class</li><li>enter-active-class</li><li>enter-to-class (2.1.8+)</li><li>leave-class</li><li>leave-active-class</li><li>leave-to-class (2.1.8+)</li></ul><p>:duration用于设置过渡动画时间</p><pre><code class="html">&lt;transition :duration=&quot;800&quot;&gt;...&lt;/transition&gt;&lt;transition :duration=&quot;{ enter: 600, leave: 1000 }&quot;&gt;...&lt;/transition&gt;</code></pre><p>例如：</p><pre><code class="html">&lt;!--前面引入Animate.css动画库--&gt;&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;h1变化&quot; @click=&quot;show=!show&quot;/&gt;    &lt;transition     enter-active-class=&quot;bounceIn&quot;    leave-active-class=&quot;bounceOut&quot;    :duration=&quot;1000&quot;    &gt;        &lt;h1 v-if=&quot;show&quot;&gt;这是一个使用自定义动画的h1&lt;/h1&gt;    &lt;/transtion&gt;&lt;/div&gt;&lt;script&gt;    var vue = new Vue({        el: &#39;#app&#39;,        data:{            show:false,        }    })&lt;/script&gt;    </code></pre><h2 id="JavaScript-钩子"><a href="#JavaScript-钩子" class="headerlink" title="JavaScript 钩子"></a>JavaScript 钩子</h2><p>html</p><pre><code class="html">&lt;transition  v-on:before-enter=&quot;beforeEnter&quot;  v-on:enter=&quot;enter&quot;  v-on:after-enter=&quot;afterEnter&quot;  v-on:enter-cancelled=&quot;enterCancelled&quot;  v-on:before-leave=&quot;beforeLeave&quot;  v-on:leave=&quot;leave&quot;  v-on:after-leave=&quot;afterLeave&quot;  v-on:leave-cancelled=&quot;leaveCancelled&quot;&gt;&lt;/transition&gt;</code></pre><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>beforeEnter(el)</td><td>el，表示要执行动画的DOM元素，是个原生的js对象，动画入场之前</td></tr><tr><td>function(el, done)</td><td>动画开始之后的样子，在这可以设置结束状态，done的起始就是afterEnter，done为afterEnter的引用</td></tr><tr><td>afterEnter(el)</td><td>动画完成之后调用</td></tr></tbody></table><p><strong>leave函数类似<br>*</strong>在 enter 和 leave 中必须使用 done 进行回调。否则，它们将被同步调用，过渡会立即完成。<br>***推荐对于仅使用 JavaScript 过渡的元素添加 v-bind:css=”false”，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响</p><p>小球移动例子：</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;jump&quot; @click=&quot;show=!show&quot;/&gt;    &lt;transition     @before-enter=&quot;beforeEnter&quot;    @enter=&quot;enter&quot;    @after-enter=&quot;afterEnter&quot;    &gt;        &lt;div v-if=&quot;show&quot; style=&quot;width: 20px;height: 20px;border-radius: 50%;background: red;&quot;&gt;&lt;/div&gt;    &lt;/transtion&gt;&lt;/div&gt;&lt;script&gt;    var vue = new Vue({        el: &#39;#app&#39;,        data:{            show:false,        },        methods:{            beforeEnter:function(el){                el.style.transform=&quot;translate(0,0)&quot;;            },            enter:function(el,done){                el.offsetWidth;                //可以认为el.offsetWidth会强制动画刷新，不加没动画                el.style.transform=&quot;translate(150px,450px)&quot;;                el.style.transition=&quot;all 1s ease&quot;;                done();            },            afterEnter:function(el){                this.show=!this.show;            }        }    })&lt;/script&gt;</code></pre><h2 id="列表过渡"><a href="#列表过渡" class="headerlink" title="列表过渡"></a>列表过渡</h2><p>1.在实现列表过渡的时候，如果需要过渡的元素是通过v-for循环渲染出来的，则使用transition-group包裹<br>2.不同于 transition，transition-group会以一个真实元素呈现，默认为span，可以通过 tag 特性更换为其他元素<br>3.内部元素总是需要提供唯一的 key 属性值</p><p>例子：随机在数组位置中插入一个数字以及随机减少一个数字<br>css</p><pre><code class="css">.num{    margin-right: 10px;    display: inline-block;}.num-enter, .num-leave-to{    opacity: 0;    transform: translateY(20px);}.num-enter-active, .num-leave-active {    transition: all 1s linear;}</code></pre><p>html</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;Add&quot; @click=&quot;add&quot;/&gt;    &lt;input type=&quot;button&quot; value=&quot;remove&quot; @click=&quot;remove&quot;/&gt;    &lt;transition-group name=&quot;num&quot; tag=&quot;div&quot;&gt;        &lt;span class=&quot;num&quot; v-for=&quot;item in arr&quot; v-bind:key=&quot;item&quot;&gt;{{item}}&lt;/span&gt;    &lt;/transition-group&gt;&lt;/div&gt;&lt;script&gt;    var vue = new Vue({        el: &#39;#app&#39;,        data:{            arr:[1,2,3,4,5,6,7,8,9],            nextnum:10//为了使key唯一,让增加的数字每次都不同,在9之后        },        methods:{            add:function(){                var index=Math.floor(Math.random() * this.arr.length);                return this.arr.splice(index,0,this.nextnum++);            },            remove:function(){                var index=Math.floor(Math.random() * this.arr.length);                return this.arr.splice(index,1);            }        }    })&lt;/script&gt;    </code></pre><p>上述例子中，添加和移除元素的时候，周围的元素会瞬间移动到他们的新布局的位置，而不是平滑的过渡，为了解决这个问题，则添加下面代码</p><pre><code class="css">/*这两个类需要配合使用，才能让其他元素有动画*/.num-move{    transition: all 1s linear;}.num-leave-active{    position: absolute;}</code></pre><h2 id="过渡模式"><a href="#过渡模式" class="headerlink" title="过渡模式"></a>过渡模式</h2><p>transition的默认行为是进入和离开同时发生，可以通过vue提供的过渡模式让进入和离开分别进行<br>格式：</p><pre><code>&lt;transitio mode=&quot;out-in&quot;&gt;&lt;/transition&gt;</code></pre><table><thead><tr><th>模式</th><th>方式</th></tr></thead><tbody><tr><td>in-out</td><td>新元素先进行过渡，完成之后当前元素过渡离开</td></tr><tr><td>out-in</td><td>当前元素先进行过渡，完成之后新元素过渡进入</td></tr></tbody></table><h2 id="组件过渡"><a href="#组件过渡" class="headerlink" title="组件过渡"></a>组件过渡</h2><p><a href="#guodu">了解组件知识点击此处直接跳转</a></p><h1 id="Vue组件"><a href="#Vue组件" class="headerlink" title="Vue组件"></a>Vue组件</h1><p>组件可以扩展 HTML 元素，封装可重用的代码。组件化是从UI的角度进行划分，前端的组件化，方便UI组件的重用</p><h2 id="全局组件注册"><a href="#全局组件注册" class="headerlink" title="全局组件注册"></a>全局组件注册</h2><p>格式：</p><pre><code class="js">Vue.component(tagName, options)</code></pre><p>调用组件的方式</p><pre><code class="html">&lt;tagName&gt;&lt;/tagName&gt;</code></pre><p>如果为驼峰命名，则采用将大写改小写，两个单词用-分离<br>例：</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;com&gt;&lt;/com&gt;    &lt;my-com&gt;&lt;/my-com&gt;&lt;/div&gt;&lt;script&gt;    Vue.component(&#39;com&#39;,{        template:&quot;&lt;h1&gt;这是由vue创建的第一个全局组件&lt;/h1&gt;&quot;,        //通过template属性指定要展示的HTML结构    })    Vue.component(&#39;myCom&#39;,{        template:&quot;&lt;h1&gt;这是由vue创建的第二个全局组件&lt;/h1&gt;&quot;,        //调用采用my-com的标签    })    var vue = new Vue({        el: &#39;#app&#39;,        data:{}    })&lt;/script&gt;</code></pre><p>**需要注意的是，template属性指向的模板内容必须有且只有唯一的根元素</p><h2 id="局部组件注册"><a href="#局部组件注册" class="headerlink" title="局部组件注册"></a>局部组件注册</h2><p>格式：</p><pre><code class="js">components:{    tagName: options}</code></pre><p>例子</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;my-com2&gt;&lt;/my-com2&gt;&lt;/div&gt;&lt;script&gt;    var vue = new Vue({        el: &#39;#app&#39;,        data:{},        components:{            myCom2:{                template:&quot;&lt;h1&gt;这是由vue创建的私有组件&lt;/h1&gt;&quot;            }        }    })&lt;/script&gt;    </code></pre><h2 id="外部定义"><a href="#外部定义" class="headerlink" title="外部定义"></a>外部定义</h2><p>通过template标签可在外面定义的组件结构后调用</p><pre><code class="html">&lt;template id=&quot;t_com&quot;&gt;    &lt;h1&gt;这是通过template元素在外面定义的组件结构&lt;/h1&gt;&lt;/template&gt;&lt;div id=&quot;app&quot;&gt;    &lt;t-com&gt;&lt;/t-com&gt;&lt;/div&gt;&lt;script&gt;    Vue.component(&#39;tCom&#39;,{        template:&#39;#t_com&#39;    })    var vue = new Vue({        el: &#39;#app&#39;,        data:{}    })&lt;/script&gt;    </code></pre><h2 id="组件的数据和方法"><a href="#组件的数据和方法" class="headerlink" title="组件的数据和方法"></a>组件的数据和方法</h2><p>1.组件可以有自己的数据，但是组件中的数据必须为一个方法<br>2.在方法的内部，必须返回一个对象<br>3.调用方式和实例中的data一样<br>例子：计数器</p><pre><code class="html">&lt;template id=&quot;counter&quot;&gt;    &lt;div&gt;        &lt;input type=&quot;button&quot; value=&quot;+&quot; @click=&quot;add&quot;/&gt;        &lt;p&gt;{{count}}&lt;/p&gt;    &lt;/div&gt;&lt;/template&gt;&lt;div id=&quot;app&quot;&gt;    &lt;counter&gt;&lt;/counter&gt;&lt;/div&gt;&lt;script&gt;    Vue.component(&#39;counter&#39;,{        template:&#39;#counter&#39;,        data:function(){            return {                count:0            }        },        methods:{            add:function(){                this.count++            }        }    })    var vue = new Vue({        el: &#39;#app&#39;,        data:{},    })&lt;/script&gt;    </code></pre><h2 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h2><p>使用v-bind 动态绑定 props的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件，props值为只读</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;com v-bind:parentmsg=&quot;msg&quot;&gt;&lt;/com&gt;    &lt;!--parentmsg通过props传递到父组件中被调用，传递的值为msg--&gt;&lt;/div&gt;&lt;script&gt;    Vue.component(&#39;com&#39;,{        template:&quot;&lt;h1&gt;这是子组件and{{parentmsg}}&lt;/h1&gt;&quot;,        props:[&#39;parentmsg&#39;],        //只有通过props数组,子组件才可以调用传递过来的值    })    var vue = new Vue({        el: &#39;#app&#39;,        data:{            msg:&quot;这是父组件的数据&quot;        }    })&lt;/script&gt;</code></pre><h2 id="子组件向父组件传值"><a href="#子组件向父组件传值" class="headerlink" title="子组件向父组件传值"></a>子组件向父组件传值</h2><p>使用 v-on 绑定自定义事件，使用 $emit(eventName) 触发事件</p><pre><code class="html">&lt;template id=&quot;com&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;点击子组件向父组件传值&quot; @click=&quot;myclick&quot;/&gt;&lt;/template&gt;&lt;div id=&quot;app&quot;&gt;    &lt;!--通过v-on绑定子组件中触发的函数func,交给父组件中的show方法来处理，参数为子组件传递的参数--&gt;    &lt;com v-on:func=&quot;show&quot;&gt;&lt;/com&gt;&lt;/div&gt;&lt;script&gt;    //添加子组件的点击事件为myclick,通过myclick触发函数,后面跟要传递的值    Vue.component(&#39;com&#39;,{        template:&quot;#com&quot;,        data(){            return{                childmsg:&quot;这是子组件的值&quot;            }        },        methods:{            myclick:function(){                this.$emit(&#39;func&#39;,this.childmsg)            }        }    })    var vue = new Vue({        el: &#39;#app&#39;,        methods:{            show:function(data){                console.log(data)            }        }    })&lt;/script&gt;</code></pre><h2 id="组件切换"><a href="#组件切换" class="headerlink" title="组件切换"></a>组件切换</h2><p>1.使用v-if/v-else进行显示和隐藏</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;a href=&quot;&quot; @click.prevent=&quot;flag=true&quot;&gt;登陆&lt;/a&gt;    &lt;a href=&quot;&quot; @click.prevent=&quot;flag=false&quot;&gt;注册&lt;/a&gt;    &lt;!--click.prevent阻止默认事件--&gt;    &lt;login v-if=&quot;flag&quot;&gt;&lt;/login&gt;    &lt;register v-else&gt;&lt;/register&gt;&lt;/div&gt;&lt;script&gt;    Vue.component(&#39;login&#39;,{        template:&quot;&lt;h3&gt;登陆组件&lt;/h3&gt;&quot;    })    Vue.component(&#39;register&#39;,{        template:&quot;&lt;h3&gt;注册组件&lt;/h3&gt;&quot;    })    var vue = new Vue({        el: &#39;#app&#39;,        data:{            flag:true        },    })&lt;/script&gt;</code></pre><p>2.使用component来展示对应名称的组件，:is属性可以用来指定展示的组件名称，类型为字符串，所以用’ ‘</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;a href=&quot;&quot; @click.prevent=&quot;cname=&#39;login&#39;&quot;&gt;登陆&lt;/a&gt;    &lt;a href=&quot;&quot; @click.prevent=&quot;cname=&#39;register&#39;&quot;&gt;注册&lt;/a&gt;    &lt;!--click.prevent阻止默认事件--&gt;    &lt;component :is=&quot;cname&quot;&gt;&lt;/component&gt;&lt;/div&gt;&lt;script&gt;    Vue.component(&#39;login&#39;,{        template:&quot;&lt;h3&gt;登陆组件&lt;/h3&gt;&quot;    })    Vue.component(&#39;register&#39;,{        template:&quot;&lt;h3&gt;注册组件&lt;/h3&gt;&quot;    })    var vue = new Vue({        el: &#39;#app&#39;,        data:{            cname:&#39;login&#39;        },    })&lt;/script&gt;</code></pre><h2 id="组件过渡-1"><a href="#组件过渡-1" class="headerlink" title="组件过渡"></a>组件过渡</h2><div id="guodu"></div><p>多个组件过渡不需要使用key属性<br>例子：<br>css</p><pre><code class="css">.v-enter,.v-leave-to{    transform: translateY(20px);    opacity: 0;}.v-enter-active,.v-leave-active{    transition: all 0.5s linear;}</code></pre><p>html</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;a href=&quot;&quot; @click.prevent=&quot;cname=&#39;login&#39;&quot;&gt;登陆&lt;/a&gt;    &lt;a href=&quot;&quot; @click.prevent=&quot;cname=&#39;register&#39;&quot;&gt;注册&lt;/a&gt;    &lt;!--click.prevent阻止默认事件--&gt;    &lt;transition mode=&quot;out-in&quot;&gt;        &lt;component :is=&quot;cname&quot;&gt;&lt;/component&gt;    &lt;/transition&gt;&lt;/div&gt;&lt;script&gt;    Vue.component(&#39;login&#39;,{        template:&quot;&lt;h3&gt;登陆组件&lt;/h3&gt;&quot;    })    Vue.component(&#39;register&#39;,{        template:&quot;&lt;h3&gt;注册组件&lt;/h3&gt;&quot;    })    var vue = new Vue({        el: &#39;#app&#39;,        data:{            cname:&#39;login&#39;        },    })&lt;/script&gt;</code></pre><h1 id="Vue路由"><a href="#Vue路由" class="headerlink" title="Vue路由"></a>Vue路由</h1><p>前端路由：主要通过URL中的hash(#号)来实现不同页面之间的切换，同时hash有个特点，http请求不包含hash相关的内容。这种通过hash改变来切换页面的方式称为前端路由</p><h2 id="安装方法-1"><a href="#安装方法-1" class="headerlink" title="安装方法"></a>安装方法</h2><p>1.使用cdn</p><pre><code class="html">&lt;script src=&quot;https://unpkg.com/vue-router/dist/vue-router.js&quot;&gt;&lt;/script&gt;</code></pre><p>2.使用npm</p><pre><code>npm install vue-router</code></pre><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>1.创建一个路由对象，VueRouter</p><pre><code class="js">var routerobj=new VueRouter()</code></pre><p>2.在路由对象里配置路由规则，routes，每个规则都是一个对象。里面包含两个必须属性<br>1)path，表示监听哪个路由地址。<br>2)component，表示路由是前面所匹配到的path，则component对应哪个组件，component必须是一个模板对象，不能是组件引用的名称。</p><pre><code class="js">var routerobj=new VueRouter({    routes:[        {path:路由地址,component:组件模板对象}    ]})</code></pre><p>3.将路由规则对象注册到vm实例上，用来监听URL地址的变化，然后展示对应组件的变化</p><pre><code class="js">var vue = new Vue({        el: &#39;#app&#39;,        router:routerobj    })</code></pre><p>4.router-view将路由规则匹配到的组件展示到页面</p><pre><code class="html">&lt;router-view&gt;&lt;/router-view&gt;</code></pre><p>5.切换方式<br>1)a标签</p><pre><code class="html">&lt;a href=&quot;#/路由地址&quot;&gt;&lt;/a&gt;</code></pre><p>注意有#进行hash</p><p>2)router-link</p><pre><code class="html">&lt;router-link to=&quot;/路由地址&quot;&gt;&lt;/router-link&gt;</code></pre><p>例子</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;router-link to=&quot;/login&quot;&gt;登陆&lt;/router-link&gt;    &lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;    &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;script&gt;    var login={        template:&#39;&lt;h1&gt;登陆组件&lt;/h1&gt;&#39;    }    var register={        template:&#39;&lt;h1&gt;注册组件&lt;/h1&gt;&#39;    }    //创建一个路由对象    var routerobj=new VueRouter({        //配置路由规则        routes:[            //component必须是一个模板对象            {path:&#39;/&#39;,redirect:&#39;/login&#39;},//重定向，默认path为/login            {path:&#39;/login&#39;,component:login},            {path:&#39;/register&#39;,component:register}        ]    })    var vue = new Vue({        el: &#39;#app&#39;,        router:routerobj    })&lt;/script&gt;</code></pre><p>点击默认URL和点击登陆时<br><img src="https://img-blog.csdnimg.cn/2019081114421866.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>点击注册时<br><img src="https://img-blog.csdnimg.cn/20190811144244389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注：可用redirect进行重定向，使默认的URL展示的指定路由地址</p><h2 id="router-link设置"><a href="#router-link设置" class="headerlink" title="router-link设置"></a>router-link设置</h2><p>1.router-link默认渲染成a标签，如需要渲染成其他标签，则在标签内添加tag属性，指向设置的标签</p><pre><code class="html">&lt;router-link to=&quot;/路由地址&quot; tag=&quot;li&quot;&gt;&lt;/router-link&gt;</code></pre><p>2.设置选中样式<br>1)默认选中路由标签的类名为router-link-active，只需修改这个类的样式，即可设置选中样式<br>2)在路由对象中添加linkActiveClass属性，设置对应的类</p><pre><code class="js">var routerobj=new VueRouter({    routes:[],    linkActiveClass:&#39;myClass&#39;})</code></pre><h2 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h2><p>1.query方式<br>不需要修改path属性，传参的格式为在连接地址后加?key=value，调用<code>$router.query.key</code><br>2.params方式<br>在path属性后添加/:key，传参的格式为在连接地址后加/value，调用<code>$router.params.key</code></p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;router-link to=&quot;/login?id=11&amp;name=hhh&quot;&gt;登陆&lt;/router-link&gt;    &lt;router-link to=&quot;/register/11/hh&quot;&gt;注册&lt;/router-link&gt;    &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;script&gt;    var login={        template:&#39;&lt;h1&gt;登陆组件&lt;br/&gt;id:{{$route.query.id}}&lt;br/&gt;name:{{$route.query.name}}&lt;/h1&gt;&#39;    }    var register={        template:&#39;&lt;h1&gt;注册组件&lt;br/&gt;id:{{$route.params.id}}&lt;br/&gt;name:{{$route.params.name}}&lt;/h1&gt;&#39;    }    var routerobj=new VueRouter({        routes:[            {path:&#39;/login&#39;,component:login},            {path:&#39;/register/:id/:name&#39;,component:register}        ]    })    var vue = new Vue({        el: &#39;#app&#39;,        router:routerobj    })&lt;/script&gt;</code></pre><h2 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h2><p>在路由匹配规则中用children属性即可实现组件的嵌套</p><pre><code class="html">&lt;!-- 用户组件acc里面包含登陆注册组件以及相应的显示 --&gt;&lt;template id=&quot;acc&quot;&gt;    &lt;div&gt;        &lt;h1&gt;这里是用户界面&lt;/h1&gt;        &lt;!-- 包含父组件路径 --&gt;        &lt;router-link to=&quot;/acc/login&quot;&gt;登陆&lt;/router-link&gt;        &lt;router-link to=&quot;/acc/register&quot;&gt;注册&lt;/router-link&gt;        &lt;router-view&gt;&lt;/router-view&gt;    &lt;/div&gt;&lt;/template&gt;&lt;div id=&quot;app&quot;&gt;    &lt;router-link to=&quot;/acc&quot;&gt;用户界面&lt;/router-link&gt;    &lt;router-view&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;script&gt;    var login={        template:&#39;&lt;h1&gt;登陆组件&lt;/h1&gt;&#39;    }    var register={        template:&#39;&lt;h1&gt;注册组件&lt;/h1&gt;&#39;    }    var acc={        template:&#39;#acc&#39;    }    var routerobj=new VueRouter({        routes:[            {                path:&#39;/acc&#39;,                component:acc,                //不需要/,否则将以根目录开头                children:[                    {path:&#39;login&#39;,component:login},                    {path:&#39;register&#39;,component:register}                ]            }        ]    })    var vue = new Vue({        el: &#39;#app&#39;,        router:routerobj    })&lt;/script&gt;</code></pre><p><img src="https://img-blog.csdnimg.cn/20190811155221618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h2><p>为了同级展示多个视图，则使用命名视图，在路由配置中，使用components配置多个路由视图，name属性对应 router-view的name属性对应components配置对象的名字，如果 router-view 没有设置名字，那么默认为 default</p><pre><code class="html">&lt;div id=&quot;app&quot;&gt;    &lt;router-view&gt;&lt;/router-view&gt;    &lt;router-view name=&#39;a&#39;&gt;&lt;/router-view&gt;    &lt;router-view name=&#39;b&#39;&gt;&lt;/router-view&gt;&lt;/div&gt;&lt;script&gt;    var com1={        template:&#39;&lt;h1&gt;组件1&lt;/h1&gt;&#39;    }    var com2={        template:&#39;&lt;h1&gt;组件2&lt;/h1&gt;&#39;    }    var com3={        template:&#39;&lt;h1&gt;组件3&lt;/h1&gt;&#39;    }    var routerobj=new VueRouter({        routes:[            {                path:&#39;/&#39;,                components:{                    default:com1,                    a:com2,                    b:com3                }            }        ]    })    var vue = new Vue({        el: &#39;#app&#39;,        router:routerobj    })&lt;/script&gt;    </code></pre>]]></content>
    
    <summary type="html">
    
      Vue教程
    
    </summary>
    
      <category term="qd" scheme="/categories/qd/"/>
    
    
  </entry>
  
  <entry>
    <title>html+css实现多种动态相册</title>
    <link href="/2019/07/21/qd/1563698753/"/>
    <id>/2019/07/21/qd/1563698753/</id>
    <published>2019-07-21T08:45:53.000Z</published>
    <updated>2020-06-11T02:57:18.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="电子相册"><a href="#电子相册" class="headerlink" title="电子相册"></a>电子相册</h1><p>原理：由a标签的锚点进行图片上的切换，左侧大图用verflow: hidden进行隐藏，右侧小图用overflow: scroll进行显示。<br>HTML：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../css/ElectronAlbum.css&quot;/&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div class=&quot;box&quot;&gt;            &lt;h1&gt;电子相册&lt;/h1&gt;            &lt;ul class=&quot;list1&quot;&gt;                &lt;li&gt;&lt;img src=&quot;../img/danji.jpg&quot; id=&quot;img1&quot;&gt;&lt;/li&gt;                &lt;li&gt;&lt;img src=&quot;../img/dianwei.jpg&quot; id=&quot;img2&quot;&gt;&lt;/li&gt;                &lt;li&gt;&lt;img src=&quot;../img/diaochan.jpg&quot; id=&quot;img3&quot;&gt;&lt;/li&gt;                &lt;li&gt;&lt;img src=&quot;../img/lanlinwang.jpg&quot; id=&quot;img4&quot;&gt;&lt;/li&gt;                &lt;li&gt;&lt;img src=&quot;../img/luban.jpg&quot; id=&quot;img5&quot;&gt;&lt;/li&gt;                &lt;li&gt;&lt;img src=&quot;../img/zhaoyun.jpg&quot; id=&quot;img6&quot;&gt;&lt;/li&gt;                &lt;li&gt;&lt;img src=&quot;../img/zhugeliang.jpg&quot; id=&quot;img7&quot;&gt;&lt;/li&gt;                &lt;li&gt;&lt;img src=&quot;../img/kai.jpg&quot; id=&quot;img8&quot;&gt;&lt;/li&gt;            &lt;/ul&gt;            &lt;ul class=&quot;list2&quot;&gt;                &lt;li&gt;&lt;a href=&quot;#img1&quot;&gt;&lt;img src=&quot;../img/danji.jpg&quot;&gt;&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#img2&quot;&gt;&lt;img src=&quot;../img/dianwei.jpg&quot;&gt;&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#img3&quot;&gt;&lt;img src=&quot;../img/diaochan.jpg&quot;&gt;&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#img4&quot;&gt;&lt;img src=&quot;../img/lanlinwang.jpg&quot;&gt;&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#img5&quot;&gt;&lt;img src=&quot;../img/luban.jpg&quot;&gt;&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#img6&quot;&gt;&lt;img src=&quot;../img/zhaoyun.jpg&quot;&gt;&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#img7&quot;&gt;&lt;img src=&quot;../img/zhugeliang.jpg&quot;&gt;&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#img8&quot;&gt;&lt;img src=&quot;../img/kai.jpg&quot;&gt;&lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>CSS</p><pre><code class="css">* {    margin: 0;    padding: 0;}body {    background: #333;}li {    list-style: none;}h1 {    text-align: center;    height: 50px;    line-height: 50px;    color: #FFFFFF;}.box{    width: 660px;    height: 320px;    margin: 200px auto;    border: 5px solid white;    box-shadow: 0px 0px 10px black;}.list1,.list2{    float: left;}.list1{    width: 480px;    height: 270px;    overflow: hidden;}.list2{    width: 180px;    height: 270px;    overflow: scroll;}.list1 img{    width: 480px;    height: 270px;}.list2 img{    width: 160px;    height: 90px;}</code></pre><h1 id="全屏背景切换"><a href="#全屏背景切换" class="headerlink" title="全屏背景切换"></a>全屏背景切换</h1><p>原理：和电子相册类似用a标签进行图片的切换，设置图片原来的位置以及点击a标签后的:target属性，设置动画效果。<br>HTML:</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot;&gt;        &lt;title&gt;FullPhoto&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../css/FullPhoto.css&quot;/&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div class=&quot;box&quot;&gt;            &lt;img src=&quot;../img/dianwei.jpg&quot; id=&quot;img1&quot;&gt;            &lt;img src=&quot;../img/diaochan.jpg&quot; id=&quot;img2&quot;&gt;            &lt;img src=&quot;../img/lanlinwang.jpg&quot; id=&quot;img3&quot;&gt;            &lt;img src=&quot;../img/sunshangxiang.jpg&quot; id=&quot;img4&quot;&gt;            &lt;img src=&quot;../img/luban.jpg&quot; id=&quot;img5&quot;&gt;        &lt;/div&gt;        &lt;div class=&quot;list&quot;&gt;            &lt;ul&gt;                &lt;li&gt;&lt;a href=&quot;#img1&quot;&gt;&lt;img src=&quot;../img/dianwei.jpg&quot;&gt;&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#img2&quot;&gt;&lt;img src=&quot;../img/diaochan.jpg&quot;&gt;&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#img3&quot;&gt;&lt;img src=&quot;../img/lanlinwang.jpg&quot;&gt;&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#img4&quot;&gt;&lt;img src=&quot;../img/sunshangxiang.jpg&quot;&gt;&lt;/a&gt;&lt;/li&gt;                &lt;li&gt;&lt;a href=&quot;#img5&quot;&gt;&lt;img src=&quot;../img/luban.jpg&quot;&gt;&lt;/a&gt;&lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>CSS:</p><pre><code class="css">* {    margin: 0;    padding: 0;}.box {    width: 100%;    height: 100%;}.box img {    width: 100%;    height: 100%;    position: fixed;    transition: all 1s linear;}.list {    position: absolute;    z-index: 999;    width: 1000px;    height: auto;    bottom: 20px;    left: 0;    right: 0;    margin: auto;}.list li {    list-style: none;    width: 130px;    height: 130px;    border: 5px solid lightskyblue;    float: left;    margin-left: 60px;    overflow: hidden;    border-radius: 50%;}.list li img {    width: 200%;}.box img:nth-child(1) {    opacity: 0;    left: -100%;}.box img:nth-child(1):target {    z-index: 1;    opacity: 1;    left: 0;}.box img:nth-child(2) {    top: -100%;}.box img:nth-child(2):target {    z-index: 1;    transform: rotate(360deg);    top: 0;}.box img:nth-child(3) {    opacity: 0;    right: -100%;}.box img:nth-child(3):target {    z-index: 1;    opacity: 1;    right: 0;}.box img:nth-child(4) {    bottom: -100%;}.box img:nth-child(4):target {    z-index: 1;    transform: rotate(360deg);    bottom: 0;}.box img:nth-child(5) {    opacity: 0;}.box img:nth-child(5):target {    z-index: 1;    opacity: 1;    transform: rotate(360deg);}</code></pre><h1 id="照片墙"><a href="#照片墙" class="headerlink" title="照片墙"></a>照片墙</h1><p>原理：利用悬浮属性，使鼠标悬浮在上面的图片进行相应的变化<br>版本1：<br>HTML:</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot;&gt;        &lt;title&gt;PhotoWall1&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../css/PhotoWall1.css&quot;/&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;ul&gt;            &lt;li&gt;&lt;img src=&quot;../img/danji.jpg&quot; &gt;&lt;/li&gt;            &lt;li&gt;&lt;img src=&quot;../img/dianwei.jpg&quot; &gt;&lt;/li&gt;            &lt;li&gt;&lt;img src=&quot;../img/diaochan.jpg&quot; &gt;&lt;/li&gt;            &lt;li&gt;&lt;img src=&quot;../img/sunshangxiang.jpg&quot; &gt;&lt;/li&gt;            &lt;li&gt;&lt;img src=&quot;../img/sunwukong.jpg&quot; &gt;&lt;/li&gt;            &lt;li&gt;&lt;img src=&quot;../img/luban.jpg&quot; &gt;&lt;/li&gt;            &lt;li&gt;&lt;img src=&quot;../img/lanlinwang.jpg&quot; &gt;&lt;/li&gt;            &lt;li&gt;&lt;img src=&quot;../img/kai.jpg&quot; &gt;&lt;/li&gt;            &lt;li&gt;&lt;img src=&quot;../img/donghuang.jpg&quot; &gt;&lt;/li&gt;        &lt;/ul&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>CSS:</p><pre><code class="css">* {    margin: 0;    padding: 0;}body {    background-color: #333;}ul {    width: 1020px;    height: 600px;    border: white solid 5px;    margin: 60px auto;    box-shadow: 0px 0px 10px #ccc;}li {    width: 320px;    height: 180px;    list-style: none;    float: left;    margin: 10px;    /* x y 扩散程度 阴影颜色*/    box-shadow: 0px 0px 10px white;}img {    width: 100%;    height: 100%;}img:hover {    width: 150%;    height: 150%;    position: relative;    top: -40px;    left: -40px;}</code></pre><p>版本2:<br>HTML:</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot;&gt;        &lt;title&gt;PhotoWall2&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../css/PhotoWall2.css&quot; /&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div class=&quot;box&quot;&gt;            &lt;img src=&quot;../img/danji.jpg&quot;&gt;            &lt;img src=&quot;../img/dianwei.jpg&quot;&gt;            &lt;img src=&quot;../img/diaochan.jpg&quot;&gt;            &lt;img src=&quot;../img/sunshangxiang.jpg&quot;&gt;            &lt;img src=&quot;../img/sunwukong.jpg&quot;&gt;            &lt;img src=&quot;../img/luban.jpg&quot;&gt;            &lt;img src=&quot;../img/lanlinwang.jpg&quot;&gt;            &lt;img src=&quot;../img/kai.jpg&quot;&gt;            &lt;img src=&quot;../img/donghuang.jpg&quot; &gt;        &lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>CSS:</p><pre><code class="css">* {    margin: 0;    padding: 0;}body {    background: url(../img/wbg.png);}.box{    width: 1000px;    margin: 0px auto;    margin-top: 100px;}.box img {    width: 320px;    height: 180px;    border: 5px solid azure;    box-shadow: -10px -10px 10px black;    transition: all 0.3s linear;}img:nth-child(odd) {    transform: rotate(20deg);}img:nth-child(even) {    transform: rotate(-20deg);}img:hover {    transform: scale(1.3);    position: relative;    z-index: 2;}</code></pre><h1 id="百叶窗"><a href="#百叶窗" class="headerlink" title="百叶窗"></a>百叶窗</h1><p>原理：当鼠标悬浮在ul标签上，所有li标签变小，悬浮的li标签变大，添加css变化动画<br>HTML:</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot;&gt;        &lt;title&gt;WindowShades&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../css/WindowShades.css&quot;/&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div class=&quot;box&quot;&gt;            &lt;ul&gt;                &lt;li&gt;&lt;img src=&quot;../img/danji.jpg&quot; &gt;&lt;/li&gt;                &lt;li&gt;&lt;img src=&quot;../img/dianwei.jpg&quot; &gt;&lt;/li&gt;                &lt;li&gt;&lt;img src=&quot;../img/diaochan.jpg&quot; &gt;&lt;/li&gt;                &lt;li&gt;&lt;img src=&quot;../img/kai.jpg&quot; &gt;&lt;/li&gt;                &lt;li&gt;&lt;img src=&quot;../img/lanlinwang.jpg&quot; &gt;&lt;/li&gt;            &lt;/ul&gt;        &lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>CSS:</p><pre><code class="css">*{    margin: 0;    padding: 0;}body{    background: url(../img/wbg.png);}.box{    width: 800px;    height: 360px;    margin: 200px auto;    /*溢出部分隐藏*/    overflow: hidden;}.box img{    width: 640px;    height: 360px;}li{    list-style: none;    width: 155px;    height: 360px;    float: left;    border-left: 5px solid white;    box-shadow: -5px 0px 10px black;    transition: all 0.5s linear;}/*鼠标悬浮在ul上，让ul变小*/.box ul:hover li{    width: 35px;}/*鼠标悬浮到某个li上，让li变大*/.box ul li:hover{    width: 635px;}</code></pre><h1 id="3d照片墙"><a href="#3d照片墙" class="headerlink" title="3d照片墙"></a>3d照片墙</h1><p>原理：将图片以绝对定位的方式放在父容器内(目的是使图片重叠在一起)，将每张图片旋转对应的角度(360°均分)，向z轴平移适合的距离。类似于一群人想要排成一个圆圈，则需要每个人平均转向不同的方向，然后向前走出一段距离。向父容器添加旋转动画，使所有照片旋转起来。<br>HTML:</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot;&gt;        &lt;title&gt;3dPhoto&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../css/3dPhoto.css&quot;/&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;div class=&quot;show&quot;&gt;            &lt;div class=&quot;box&quot;&gt;                &lt;img src=&quot;../img/zhugeliang.jpg&quot; &gt;                &lt;img src=&quot;../img/sunwukong.jpg&quot; &gt;                &lt;img src=&quot;../img/diaochan.jpg&quot; &gt;                &lt;img src=&quot;../img/libai.jpg&quot; &gt;                &lt;img src=&quot;../img/zhaoyun.jpg&quot; &gt;                &lt;img src=&quot;../img/donghuang.jpg&quot; &gt;                &lt;img src=&quot;../img/dianwei.jpg&quot; &gt;                &lt;img src=&quot;../img/kai.jpg&quot; &gt;                &lt;img src=&quot;../img/lanlinwang.jpg&quot; &gt;                &lt;img src=&quot;../img/sunshangxiang.jpg&quot; &gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>CSS:</p><pre><code class="css">* {    margin: 0;    padding: 0;}body {    background: url(../img/wbg.png);}.box {    width: 320px;    height: 200px;    position: absolute;    top: 0;    bottom: 0;    left: 0;    right: 0;    margin: auto;    transform-style: preserve-3d;    animation: im 20s linear infinite;}.box img {    width: 100%;    height: 100%;    position: absolute;}@keyframes im{    0% {        transform: rotateY(0deg) rotateX(10deg);    }    25% {        transform: rotateY(90deg) rotateX(-10deg);    }    50% {        transform: rotateY(180deg) rotateX(10deg);    }    75% {        transform: rotateY(270deg) rotateX(-10deg);    }    100% {        transform: rotateY(360deg) rotateX(10deg);    }}/*10张图片3d变换*/.box img:nth-child(1) {    transform: rotateY(0deg) translateZ(600px);    backface-visibility: visible;}.box img:nth-child(2) {    transform: rotateY(36deg) translateZ(600px);    backface-visibility: visible;}.box img:nth-child(3) {    transform: rotateY(72deg) translateZ(600px);    backface-visibility: visible;}.box img:nth-child(4) {    transform: rotateY(108deg) translateZ(600px);    backface-visibility: visible;}.box img:nth-child(5) {    transform: rotateY(144deg) translateZ(600px);    backface-visibility: visible;}.box img:nth-child(6) {    transform: rotateY(180deg) translateZ(600px);    backface-visibility: visible;}.box img:nth-child(7) {    transform: rotateY(216deg) translateZ(600px);    backface-visibility:visible;}.box img:nth-child(8) {    transform: rotateY(252deg) translateZ(600px);    backface-visibility: visible;}.box img:nth-child(9) {    transform: rotateY(288deg) translateZ(600px);    backface-visibility: visible;}.box img:nth-child(10) {    transform: rotateY(324deg) translateZ(600px);    backface-visibility: visible;}</code></pre><h1 id="立方体相册"><a href="#立方体相册" class="headerlink" title="立方体相册"></a>立方体相册</h1><p>原理：将ul下6个li标签进行绝对定位，6个li标签分别转向6个方向，向Z轴的两个方向扩展立方体边长的一半。<br>HTML:</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot;&gt;        &lt;title&gt;cube&lt;/title&gt;        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;../css/cube.css&quot;/&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;ul&gt;            &lt;li&gt;&lt;/li&gt;            &lt;li&gt;&lt;/li&gt;            &lt;li&gt;&lt;/li&gt;            &lt;li&gt;&lt;/li&gt;            &lt;li&gt;&lt;/li&gt;            &lt;li&gt;&lt;/li&gt;        &lt;/ul&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>CSS:</p><pre><code class="css">* {    margin: 0;    padding: 0;}body {    background: #333;}ul {    width: 300px;    height: 300px;    position: absolute;    top: 0;    bottom: 0;    left: 0;    right: 0;    margin: auto;    /*3d空间*/    transform-style: preserve-3d;    animation: box 20s linear infinite;}@keyframes box {    /*3d旋转 x y z deg*/    from {        transform: rotate3d(0, 0, 0, 0deg);    }    to {        transform: rotate3d(1, 1, 1, 360deg);    }}li {    width: 300px;    height: 300px;    list-style: none;    border: 1px solid black;    position: absolute;    opacity: 0.8;    box-shadow: 0px 0px 10px white;}li:nth-child(1) {    background: url(../img/danji.jpg);    background-position: center;    background-size: cover;    transform: translateZ(150px);}/*后*/li:nth-child(2) {    background: url(../img/donghuang.jpg);    background-position: center;    background-size: cover;    transform: translateZ(-150px);}/*左*/li:nth-child(3) {    background: url(../img/luban.jpg);    background-position: center;    background-size: cover;    transform: rotateY(90deg) translateZ(-150px);}/*右*/li:nth-child(4) {    background: url(../img/libai.jpg);    background-position: center;    background-size: cover;    transform: rotateY(90deg) translateZ(150px);}/*上*/li:nth-child(5) {    background: url(../img/kai.jpg);    background-position: center;    background-size: cover;    transform: rotateX(90deg) translateZ(150px);}li:nth-child(6) {    background: url(../img/sunwukong.jpg);    background-position: center;    background-size: cover;    transform: rotateX(90deg) translateZ(-150px);}ul:hover {    animation-play-state: paused;}</code></pre><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p><a href="https://github.com/RoyalKnights/PhotoShow" target="_blank" rel="noopener">GitHub</a></p>]]></content>
    
    <summary type="html">
    
      html+css实现多种动态相册
    
    </summary>
    
      <category term="qd" scheme="/categories/qd/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP接口实战教程——PHP+Mysql+ajax实现分页查询接口</title>
    <link href="/2019/06/09/ht/1560073278/"/>
    <id>/2019/06/09/ht/1560073278/</id>
    <published>2019-06-09T09:41:18.000Z</published>
    <updated>2020-06-11T02:57:18.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="知识预备"><a href="#知识预备" class="headerlink" title="知识预备"></a>知识预备</h1><h2 id="Mysql知识"><a href="#Mysql知识" class="headerlink" title="Mysql知识"></a>Mysql知识</h2><p>分页的本质就是在查询记录中选择I-J条记录</p><blockquote><p>limit M offset N<br>limit N,M</p></blockquote><p>M pageSize 页面上每页展示的格式<br>N pageSize*(pageIndex-1)<br>当offset的N超过数据集的总量，会返回一个空的数据集</p><p>大量数据查询<br>随着N值越来越大，查询的效率越来越低<br>解决方法：<br>1.科学的建立索引<br>2.查询步骤一分为二</p><h2 id="php操作数据库"><a href="#php操作数据库" class="headerlink" title="php操作数据库"></a>php操作数据库</h2><p><a href="https://blog.csdn.net/qq_41866776/article/details/90747138" target="_blank" rel="noopener">详细点击这里</a></p><h2 id="原生ajax操作"><a href="#原生ajax操作" class="headerlink" title="原生ajax操作"></a>原生ajax操作</h2><p>1.new一个request实例<br>2.http请求状态变化<br>3.发送请求</p><pre><code class="js">//new一个request实例var request = new XMLHttpRequest();//http请求状态变化request.onreadystatechange = function() {    //解析已经完成    if(request.readyState === 4) {    //服务器状态码        if(request.status !== 200) {            console.log(request.responseText);        } else {            console.log(request.responseText);         }    }}//发送请求request.open(&#39;GET&#39;, &quot;test.php&quot;);//request.setRequestHeader(&quot;Content-type&quot;, &quot;application/x-www-form-urlencoded&quot;);request.send();</code></pre><h1 id="后端接口开发"><a href="#后端接口开发" class="headerlink" title="后端接口开发"></a>后端接口开发</h1><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><p>用excel生成一个含用户名(从uer001-uer200)，密码(随机6位数)，年龄(10-60岁)，性别的表，将其转换为csv保存(文件-另存为-选择csv（逗号分隔）)。若存在中文则将csv用记事本打开，另存为，选择编码格式为UTF-8。</p><p><img src="https://img-blog.csdnimg.cn/20190608152507714.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2019060815235268.png" alt="在这里插入图片描述"><br>打开phpmyadmin建立名为MyDB的数据库以及名为user的数据表(id主键,password,age,sex)<br>导入整个csv</p><h2 id="接口数据结构设置"><a href="#接口数据结构设置" class="headerlink" title="接口数据结构设置"></a>接口数据结构设置</h2><p>url：<a href="http://127.0.0.1/phpmysql/php/app.php" target="_blank" rel="noopener">http://127.0.0.1/phpmysql/php/app.php</a><br>method：GET<br>requst：</p><table><thead><tr><th>参数名</th><th>必选</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>pageSize</td><td>否</td><td>int</td><td>每页展示的数据量,默认为10</td></tr><tr><td>pageIndex</td><td>是</td><td>int</td><td>第几页的数据</td></tr></tbody></table><p> response</p><pre><code>{    &quot;code&quot;: 0,    &quot;message&quot;: &quot;Success&quot;,    &quot;info&quot;: {        &quot;count&quot;: &quot;200&quot;,        &quot;totalPage&quot;: 20,        &quot;data&quot;: [{            &quot;id&quot;: &quot;user001&quot;,            &quot;password&quot;: &quot;997320&quot;,            &quot;age&quot;: 27,            &quot;sex&quot;: &quot;女&quot;        }]    }}code说明0查询成功1数据库连接失败2未传入pageIndex3未传入任何数据</code></pre><h2 id="接口类设置"><a href="#接口类设置" class="headerlink" title="接口类设置"></a>接口类设置</h2><p>1.类名：app<br>2.成员变量:$conn<br>3.成员函数:</p><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>__construct</td><td>构造函数，连接数据库</td></tr><tr><td>run</td><td>接口运行函数</td></tr><tr><td>pagination</td><td>查询操作</td></tr><tr><td>getCount</td><td>计算数据总量</td></tr><tr><td>returnSuccessData</td><td>返回正确的结果</td></tr><tr><td>returnData</td><td>返回所有的结果</td></tr></tbody></table><h2 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h2><pre><code class="php">&lt;?php    class app{        private $conn;        /**         * app constructor.         */            public function __construct()        {            // 创建连接            $this-&gt;conn = new mysqli(&quot;localhost&quot;, &quot;root&quot;, &quot;&quot;,&quot;mydb&quot;);            //防止中文乱码            $this-&gt;conn-&gt;query(&quot;SET NAMES UTF8&quot;);            //返回数据库连接错误            if ($this-&gt;conn-&gt;connect_error) {                return $this-&gt;returnData(1,$this-&gt;conn-&gt;connect_error);            }        }        /**         * 接口运行         * @return false|string         */        public function run(){            if(is_array($_GET)&amp;&amp;count($_GET)&gt;0)//先判断是否通过get传值了            {                if(isset($_GET[&quot;pageIndex&quot;]))//是否存在&quot;pageIndex&quot;的参数                {                    $pageSize=$_GET[&#39;pageSize&#39;] ?? 10;//设置默认值为10                    $pageIndex=$_GET[&#39;pageIndex&#39;];                    $data=$this-&gt;pagination($pageSize,$pageIndex);//调用分页函数                    $count=$this-&gt;getCount();//调用计算总数的函数                    $totalPage=ceil($count/$pageSize);//计算总页数                    $info=[                        &#39;count&#39;=&gt;$count,                        &#39;totalPage&#39;=&gt;$totalPage,                        &#39;data&#39;=&gt;$data,                    ];//数据装入                    return $this-&gt;returnSuccessData($info);//返回正确结果                }else{                    return $this-&gt;returnData(2,&#39;未传入pageIndex&#39;);                }            }else{                return $this-&gt;returnData(3,&#39;未传入任何值&#39;);            }        }        /**         * 查询操作         * @param $pageSize         * @param $pageIndex         * @return array         */        private function pagination($pageSize, $pageIndex){            $result=[];            //防sql注入            $stmt=$this-&gt;conn-&gt;prepare(&quot;SELECT * FROM `user` LIMIT ? OFFSET ?&quot;);            $page=$pageSize*($pageIndex-1);            $stmt-&gt;bind_param(&quot;ii&quot;, $pageSize, $page);            $stmt-&gt;execute();            $data = $stmt-&gt;get_result();            //将获取的结果装入数组            while ($row = $data-&gt;fetch_assoc()){                array_push($result,$row);            }            return $result;        }        /**         * 得到总条数         * @return mixed         */        private function getCount(){            $result=$this-&gt;conn-&gt;query(&quot;SELECT count(id) id FROM `user`&quot;);            $row = $result-&gt;fetch_assoc();            return $row[&#39;id&#39;];        }        /**         * 返回正确的结果数据         * @param $data         * @return false|string         */        private function returnSuccessData($data){            $content=[                &#39;code&#39;=&gt;0,                &#39;message&#39;=&gt;&#39;Success&#39;,                &#39;info&#39;=&gt;$data,            ];            $this-&gt;conn-&gt;close();            return json_encode($content);        }        /**         *返回一个通用的结果         * @param $code         * @param $message         * @param array $data         * @return false|string         */        private function returnData($code,$message,$data=[]){            $content=[                &#39;code&#39;=&gt;$code,                &#39;message&#39;=&gt;$message,                &#39;info&#39;=&gt;$data,            ];            $this-&gt;conn-&gt;close();            return json_encode($content);        }    }    $app=new app();    $re=$app-&gt;run();    echo $re;?&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      PHP接口实战教程——PHP+Mysql+ajax实现分页查询接口
    
    </summary>
    
      <category term="ht" scheme="/categories/ht/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP数据库——PHP学习笔记（四）</title>
    <link href="/2019/06/04/ht/1559613283/"/>
    <id>/2019/06/04/ht/1559613283/</id>
    <published>2019-06-04T01:54:43.000Z</published>
    <updated>2020-06-11T02:57:18.369Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><p><a href="https://php.net/manual/zh/mysqli.summary.php" target="_blank" rel="noopener">MySQLi类</a></p><h2 id="MySQL连接"><a href="#MySQL连接" class="headerlink" title="MySQL连接"></a>MySQL连接</h2><p>创建mysqli对象，用对象中的close方法关闭连接</p><pre><code class="php">&lt;?php    $servername = &quot;localhost&quot;;    $username = &quot;root&quot;;    $password = &quot;&quot;;     // 创建连接    $conn = new mysqli($servername, $username, $password);     // 检测连接    if ($conn-&gt;connect_error) {        die(&quot;连接失败: &quot; . $conn-&gt;connect_error);    }    echo &quot;连接成功&quot;    $conn-&gt;close()?&gt;</code></pre><h2 id="建立数据表插入数据"><a href="#建立数据表插入数据" class="headerlink" title="建立数据表插入数据"></a>建立数据表插入数据</h2><p>对象中的query方法<br>创建数据库</p><pre><code class="php">$sql = &quot;CREATE DATABASE myDB2&quot;;if ($conn-&gt;query($sql) TRUE) {    echo &quot;数据库创建成功&quot;;} else {    echo &quot;Error creating database: &quot; . $conn-&gt;error;}</code></pre><p>建表以及插入数据</p><pre><code class="php">&lt;?php    $servername = &quot;localhost&quot;;    $username = &quot;root&quot;;    $password = &quot;&quot;;    $dbname=&quot;myDB1&quot;;    // 创建连接    $conn = new mysqli($servername, $username, $password,$dbname);    // 检测连接    if ($conn-&gt;connect_error) {        die(&quot;连接失败: &quot; . $conn-&gt;connect_error);    }     // 创建数据库    $sql=&quot;CREATE TABLE `mydb1`.`user` ( `id` VARCHAR(10) NOT NULL , `name` VARCHAR(10) NOT NULL , `age` INT NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM&quot;;    if($conn-&gt;query($sql)){            echo &quot;user表创建成功&quot;.&quot;&lt;br /&gt;&quot;;    //插入数据库操作        $sql=&quot;INSERT INTO `user` (`id`, `name`, `age`) VALUES (&#39;12356&#39;, &#39;Bob&#39;, &#39;10&#39;)&quot;;        if($conn-&gt;query($sql)){            echo &quot;插入数据库成功&quot;.&quot;&lt;br /&gt;&quot;;        }else{            echo &quot;插入数据失败&quot;.$conn-&gt;error.&quot;&lt;br /&gt;&quot;;        }            //插入多条数据        $sql=&quot;INSERT INTO `user` (`id`, `name`, `age`) VALUES (&#39;12385&#39;, &#39;Rose&#39;, &#39;15&#39;);&quot;;        $sql.=&quot;INSERT INTO `user` (`id`, `name`, `age`) VALUES (&#39;12366&#39;, &#39;Json&#39;, &#39;15&#39;)&quot;;        if($conn-&gt;multi_query($sql)){            echo &quot;插入数据库成功&quot;.&quot;&lt;br /&gt;&quot;;        }else{            echo &quot;插入数据失败&quot;.$conn-&gt;error.&quot;&lt;br /&gt;&quot;;        }    }    else{        echo &quot;创建错误&quot;.$conn-&gt;error.&quot;&lt;br /&gt;&quot;;    }    $conn-&gt;close();?&gt;</code></pre><p>数据预处理<br>1.创建sql模板，其中的值用问号代替<br>2.bind_param()，第一个参数为列预处理，i-整形，d-双精度浮点型，s-字符串，b-二进制大对象<br>3.execute()，插入<br>4.关闭模板</p><pre><code class="php">&lt;?php    $servername = &quot;localhost&quot;;    $username = &quot;root&quot;;    $password = &quot;&quot;;    $dbname=&quot;myDB1&quot;;    // 创建连接    $conn = new mysqli($servername, $username, $password,$dbname);    // 检测连接    if ($conn-&gt;connect_error) {        die(&quot;连接失败: &quot; . $conn-&gt;connect_error);    }     // 创建数据库    $sql=&quot;CREATE TABLE `mydb1`.`user` ( `id` VARCHAR(10) NOT NULL , `name` VARCHAR(10) NOT NULL , `age` INT NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM&quot;;    if($conn-&gt;query($sql)){        echo &quot;user表创建成功&quot;.&quot;&lt;br /&gt;&quot;;        //插入数据库操作        $stmt=$conn-&gt;prepare(&quot;INSERT INTO `user` (`id`, `name`, `age`) VALUES (?, ?, ?)&quot;);        $stmt-&gt;bind_param(&quot;ssi&quot;, $id, $name, $age);        $id = &quot;12356&quot;;        $name = &quot;Bob&quot;;        $age = &quot;10&quot;;        $stmt-&gt;execute();        $id = &quot;12385&quot;;        $name = &quot;Rose&quot;;        $age = &quot;15&quot;;        $stmt-&gt;execute();        $id = &quot;12366&quot;;        $name = &quot;Json&quot;;        $age = &quot;15&quot;;        $stmt-&gt;execute();        echo &quot;插入成功&quot;;        $stmt-&gt;close();        $conn-&gt;close();    }    else{        echo &quot;创建错误&quot;.$conn-&gt;error.&quot;&lt;br /&gt;&quot;;    }?&gt;</code></pre><p>数据的删除，更新类似，只是sql语句不同</p><h2 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h2><p> 1.将查询结果的语句赋值给 $result<br> 2.函数 num_rows() 判断返回的数据，行数<br> 3.函数 fetch_assoc() 函数从结果集中取得一行作为关联数组</p><pre><code class="php">&lt;?php    $servername = &quot;localhost&quot;;    $username = &quot;root&quot;;    $password = &quot;&quot;;    $dbname=&quot;myDB1&quot;;    // 创建连接    $conn = new mysqli($servername, $username, $password, $dbname);    // Check connection    if ($conn-&gt;connect_error) {        die(&quot;连接失败: &quot; . $conn-&gt;connect_error);    }      $sql = &quot;SELECT id, name, age FROM user&quot;;    $result = $conn-&gt;query($sql);    if ($result-&gt;num_rows &gt; 0) {    // 输出数据        while($row = $result-&gt;fetch_assoc()) {            echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - Name: &quot; . $row[&quot;name&quot;]. &quot; - age: &quot; . $row[&quot;age&quot;]. &quot;&lt;br&gt;&quot;;           }    }else{        echo &quot;0 结果&quot;;    }    $conn-&gt;close();?&gt;</code></pre><p>数据的查询类似，只是sql语句不同</p><h1 id="面向过程"><a href="#面向过程" class="headerlink" title="面向过程"></a>面向过程</h1><p><a href="https://www.runoob.com/php/php-ref-mysqli.html" target="_blank" rel="noopener">MySQLi 函数</a></p><h2 id="MySQL连接-1"><a href="#MySQL连接-1" class="headerlink" title="MySQL连接"></a>MySQL连接</h2><blockquote><p>mysqli_connect(host,username,password,dbname,port,socket);</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>host</td><td>可选。规定主机名或 IP 地址</td></tr><tr><td>username</td><td>可选。规定 MySQL 用户名</td></tr><tr><td>password</td><td>可选。规定 MySQL 密码</td></tr><tr><td>dbname</td><td>可选。规定默认使用的数据库</td></tr><tr><td>port</td><td>可选。规定尝试连接到 MySQL 服务器的端口号。</td></tr><tr><td>socket</td><td>可选。规定 socket 或要使用的已命名 pipe</td></tr></tbody></table><p>关闭链接</p><blockquote><p>mysqli_close()</p></blockquote><pre><code class="php">&lt;?php    $servername = &quot;localhost&quot;;    $username = &quot;root&quot;;    $password = &quot;&quot;;    // 创建连接    $conn = mysqli_connect($servername, $username, $password);    // 检测连接    if (!$conn) {        die(&quot;Connection failed: &quot; . mysqli_connect_error());    }    echo &quot;连接成功&quot;;    //关闭链接    mysqli_close($conn);?&gt;</code></pre><h2 id="建立数据表插入数据-1"><a href="#建立数据表插入数据-1" class="headerlink" title="建立数据表插入数据"></a>建立数据表插入数据</h2><p>mysqli_query() 函数执行某个针对数据库的查询</p><blockquote><p>mysqli_query(connection,query,resultmode);</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>connection</td><td>必需。规定要使用的 MySQL 连接</td></tr><tr><td>query</td><td>必需，规定查询字符串</td></tr><tr><td>resultmode</td><td>可选。一个常量     MYSQLI_USE_RESULT（如果需要检索大量数据，请使用这个)MYSQLI_STORE_RESULT（默认）</td></tr></tbody></table><p>创建数据库</p><pre><code class="php">$sql = &quot;CREATE DATABASE myDB2&quot;;if (mysqli_query($conn, $sql)) {    echo &quot;数据库创建成功&quot;;} else {    echo &quot;Error creating database: &quot; . mysqli_error($conn);}</code></pre><p>建表以及插入数据</p><pre><code class="php">&lt;?php    $servername = &quot;localhost&quot;;    $username = &quot;root&quot;;    $password = &quot;&quot;;    $dbname=&quot;myDB2&quot;;     // 创建连接    $conn = mysqli_connect($servername, $username, $password,$dbname);    // 检测连接    if (!$conn) {        die(&quot;连接失败: &quot; . mysqli_connect_error());    }     // 创建数据库     $sql=&quot;CREATE TABLE `mydb2`.`user` ( `id` VARCHAR(10) NOT NULL , `name` VARCHAR(10) NOT NULL , `age` INT NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM&quot;;     if (mysqli_query($conn, $sql)){        $sql=&quot;INSERT INTO `user` (`id`, `name`, `age`) VALUES (&#39;12356&#39;, &#39;Bob&#39;, &#39;10&#39;)&quot;;        if (mysqli_query($conn, $sql)) {                echo &quot;插入数据库成功&quot;.&quot;&lt;br /&gt;&quot;;        }         else {            echo &quot;插入数据失败&quot;. mysqli_error($conn).&quot;&lt;br /&gt;&quot;;        }        $sql=&quot;INSERT INTO `user` (`id`, `name`, `age`) VALUES (&#39;12385&#39;, &#39;Rose&#39;, &#39;15&#39;);&quot;;        $sql.=&quot;INSERT INTO `user` (`id`, `name`, `age`) VALUES (&#39;12366&#39;, &#39;Json&#39;, &#39;15&#39;)&quot;;        if (mysqli_multi_query($conn, $sql)) {            echo &quot;插入数据库成功&quot;.&quot;&lt;br /&gt;&quot;;        }         else {               echo &quot;插入数据失败&quot;. mysqli_error($conn).&quot;&lt;br /&gt;&quot;;        }    }     else{        echo &quot;创建错误&quot;. mysqli_error($conn);    }     mysqli_close($conn);?&gt;</code></pre><p>数据预处理<br> 1.创建sql模板<br> 2.为 mysqli_stmt_prepare() 初始化 statement 对象<br> 3.mysqli_stmt_prepare(,)预处理语句<br> 4.mysqli_stmt_bind_param()绑定参数<br> 5.mysqli_stmt_execute()插入语句</p><pre><code class="php">&lt;?php    $servername = &quot;localhost&quot;;    $username = &quot;root&quot;;    $password = &quot;&quot;;    $dbname=&quot;myDB2&quot;;     // 创建连接    $conn = mysqli_connect($servername, $username, $password,$dbname);    // 检测连接    if (!$conn) {        die(&quot;连接失败: &quot; . mysqli_connect_error());    }     // 创建数据库     $sql=&quot;CREATE TABLE `mydb2`.`user` ( `id` VARCHAR(10) NOT NULL , `name` VARCHAR(10) NOT NULL , `age` INT NOT NULL , PRIMARY KEY (`id`)) ENGINE = MyISAM&quot;;     if (mysqli_query($conn, $sql)){        $sql=&quot;INSERT INTO `user` (`id`, `name`, `age`) VALUES (?, ?, ?)&quot;;        // 为 mysqli_stmt_prepare() 初始化 statement 对象        $stmt = mysqli_stmt_init($conn);        //预处理语句        if (mysqli_stmt_prepare($stmt, $sql)) {        // 绑定参数            mysqli_stmt_bind_param($stmt, &#39;ssi&#39;, $id, $name, $age);            // 设置参数并执行            $id = &quot;12356&quot;;            $name = &quot;Bob&quot;;            $age = &quot;10&quot;;                mysqli_stmt_execute($stmt);            $id = &quot;12385&quot;;            $name = &quot;Rose&quot;;            $age = &quot;15&quot;;                mysqli_stmt_execute($stmt);                $id = &quot;12366&quot;;            $name = &quot;Json&quot;;            $age = &quot;15&quot;;            mysqli_stmt_execute($stmt);            echo &quot;插入成功&quot;;        }        }     else{        echo &quot;创建错误&quot;. mysqli_error($conn);    }     mysqli_close($conn);?&gt;</code></pre><h2 id="读取数据-1"><a href="#读取数据-1" class="headerlink" title="读取数据"></a>读取数据</h2><p>同面向对象</p><pre><code class="php">&lt;?php    $servername = &quot;localhost&quot;;    $username = &quot;root&quot;;    $password = &quot;&quot;;    $dbname=&quot;myDB2&quot;;    // 创建连接    $conn = mysqli_connect($servername, $username, $password, $dbname);    // Check connection    if (!$conn) {        die(&quot;连接失败: &quot; . mysqli_connect_error());    }     $sql = &quot;SELECT id, name, age FROM user&quot;;    $result = mysqli_query($conn, $sql);     if (mysqli_num_rows($result) &gt; 0) {    // 输出数据        while($row = mysqli_fetch_assoc($result)) {            echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - Name: &quot; . $row[&quot;name&quot;]. &quot; - age: &quot; . $row[&quot;age&quot;]. &quot;&lt;br&gt;&quot;;        }    }     else {        echo &quot;0 结果&quot;;    }     mysqli_close($conn);?&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      PHP数据库——PHP学习笔记（四）
    
    </summary>
    
      <category term="ht" scheme="/categories/ht/"/>
    
    
  </entry>
  
  <entry>
    <title>Wamp安装与配置</title>
    <link href="/2019/06/04/qt/1560958994/"/>
    <id>/2019/06/04/qt/1560958994/</id>
    <published>2019-06-04T01:54:43.000Z</published>
    <updated>2020-06-11T02:57:18.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="wamp下载"><a href="#wamp下载" class="headerlink" title="wamp下载"></a>wamp下载</h1><p><a href="http://www.wampserver.com/en/" target="_blank" rel="noopener">点击进入官网</a><br>点击导航栏的DOWNLORD或者将主页拉到最下面<br><img src="https://img-blog.csdnimg.cn/20190619223418704.png" alt="在这里插入图片描述"><br>根据自己的电脑选择32位或者64位的版本或者点击SourceForge进行选择版本进行下载<br><img src="https://img-blog.csdnimg.cn/20190619223612148.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="Wamp安装"><a href="#Wamp安装" class="headerlink" title="Wamp安装"></a>Wamp安装</h1><p><img src="https://img-blog.csdnimg.cn/20190619224219587.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619224236804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>选择安装路径这里以D盘为例<br><img src="https://img-blog.csdnimg.cn/20190619224251290.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20190619224332860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619224340417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>等待安装完成</p><p><img src="https://img-blog.csdnimg.cn/20190619224426435.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>安装完成后选择浏览器，这里选择谷歌<br><img src="https://img-blog.csdnimg.cn/20190619224530581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619224604742.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="Wamp配置"><a href="#Wamp配置" class="headerlink" title="Wamp配置"></a>Wamp配置</h1><h2 id="中文修改"><a href="#中文修改" class="headerlink" title="中文修改"></a>中文修改</h2><p>右击任务栏图标，选择language选择chinese</p><h2 id="自定义网站根目录"><a href="#自定义网站根目录" class="headerlink" title="自定义网站根目录"></a>自定义网站根目录</h2><p>左击任务栏图标，选择Apache下的httpd.conf<br>用ctrl+f搜索DocumentRoot，将下面里面的路径改为自己制定的路径保存，我这选择E:\WebProject</p><p><img src="https://img-blog.csdnimg.cn/2019061923063774.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/201906192310440.png" alt="在这里插入图片描述"><br>同样选择Apach下httpd-vhosts.conf，将路径修改保存<br><img src="https://img-blog.csdnimg.cn/20190619231107741.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619231143769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在安装目录下选择wampmanager.ini用记事本打开，搜索menu.left，修改名字和目录<br><img src="https://img-blog.csdnimg.cn/20190619231520963.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619231742496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>同样在安装目录下选择wampmanager.tpl用记事本打开，搜索第二个menu.left，修改名字和目录<br><img src="https://img-blog.csdnimg.cn/20190619232028817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190619232130112.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重启所有服务。至此，本地服务器就搭建好了，如需更多操作，可继续阅读下文。</p><h1 id="多站点配置"><a href="#多站点配置" class="headerlink" title="多站点配置"></a>多站点配置</h1><p>选择Apach下httpd-vhosts.conf，添加下面代码<br>ServerName为服务器名字<br>DocumentRoot为访问的文件夹</p><pre><code>&lt;VirtualHost *:80&gt;  ServerName test01.com  DocumentRoot &quot;E:\WebProject\test1&quot;&lt;/VirtualHost&gt;</code></pre><p>修改DNS（hosts）文件(C:\Windows\System32\drivers\etc\hosts)<br>添加如下内容：<br>127.0.0.1 test01.com<br>即可通过test01.com这个域名访问资源</p><h1 id="允许外网访问"><a href="#允许外网访问" class="headerlink" title="允许外网访问"></a>允许外网访问</h1><p>1.左击任务栏图标，选择Apache下的httpd.conf<br>搜索Directory</p><pre><code>&lt;Directory /&gt;    AllowOverride none    Require all granted&lt;/Directory&gt;</code></pre><p>改为</p><pre><code>&lt;Directory /&gt;    AllowOverride none    #Require all denied    Require all granted&lt;/Directory&gt;</code></pre><p>搜索onlineoffline</p><pre><code>#onlineoffline tag - don&#39;t remove    Require local</code></pre><p>改为</p><pre><code>#onlineoffline tag - don&#39;t remove    Require local    Require all granted</code></pre><p>2.左击任务栏图标，选择Apache下的httpd-vhosts.conf<br>在Require local下加上Require all granted</p><h1 id="修改默认端口号"><a href="#修改默认端口号" class="headerlink" title="修改默认端口号"></a>修改默认端口号</h1><p>左击任务栏图标，选择Apache下的httpd.conf<br>搜索80</p><pre><code>#Listen 12.34.56.78:80Listen 0.0.0.0:80Listen [::0]:80</code></pre><p>改为端口号8080</p><pre><code>#Listen 12.34.56.78:8080Listen 0.0.0.0:8080Listen [::0]:8080</code></pre><p>继续搜索</p><pre><code>ServerName localhost:80</code></pre><p>改为</p><pre><code>ServerName localhost:8080</code></pre><p>但是在此时发现phpMyAdmin和虚拟主机无法直接启动<br>打开wamp目录下wampmanager.tpl</p><pre><code>Type: item; Caption: &quot;${w_localhost}&quot;; Action: run; FileName: &quot;${c_navigator}&quot;; Parameters: &quot;${c_edge}http://localhost${UrlPort}/&quot;; Glyph: 27${SupportDBMS}${phmyadMenu}Type: item; Caption: &quot;${w_phpmyadmin}    ${phpmyadminVersion}&quot;; Action: run; FileName: &quot;${c_navigator}&quot;; Parameters: &quot;${c_edge}http://localhost${UrlPort}/phpmyadmin/&quot;; Glyph: 28${SupportDBMS}${adminerMenu}Type: item; Caption: &quot;Adminer        ${adminerVersion}&quot;; Action: run; FileName: &quot;${c_navigator}&quot;; Parameters: &quot;${c_edge}http://localhost${UrlPort}/adminer/&quot;; Glyph: 28</code></pre><p>将url的localhost后面添加:8080的端口号(3个)</p><pre><code>${UrlPort}Type: item; Caption: &quot;${w_localhost}&quot;; Action: run; FileName: &quot;${c_navigator}&quot;; Parameters: &quot;http://localhost:8080/&quot;; Glyph: 27${SupportDBMS}${phmyadMenu}Type: item; Caption: &quot;${w_phpmyadmin}    ${phpmyadminVersion}&quot;; Action: run; FileName: &quot;${c_navigator}&quot;; Parameters: &quot;http://localhost:8080/phpmyadmin/&quot;; Glyph: 28${SupportDBMS}${adminerMenu}Type: item; Caption: &quot;Adminer        ${adminerVersion}&quot;; Action: run; FileName: &quot;${c_navigator}&quot;; Parameters: &quot;http://localhost:8080/adminer/&quot;; Glyph: 28</code></pre>]]></content>
    
    <summary type="html">
    
      Wamp安装与配置
    
    </summary>
    
      <category term="qt" scheme="/categories/qt/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP进阶知识——PHP学习笔记（三）</title>
    <link href="/2019/06/02/ht/1559479981/"/>
    <id>/2019/06/02/ht/1559479981/</id>
    <published>2019-06-02T12:53:01.000Z</published>
    <updated>2020-06-11T02:57:18.370Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h1><p>一个数组中的值可以是另一个数组，此数组的值也可以是一个数组，照此，可以创建二维或者三维数组</p><pre><code class="php">&lt;?php    $arr1=array(        $arrch1=array(&#39;1&#39;,&#39;2&#39;,&#39;3&#39;),        $arrch2=array(&#39;1&#39;,&#39;2&#39;,&#39;3&#39;),        $arrch3=array(&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)    );    print_r($arr1);//print_r array，将会按照一定格式显示键和元素?&gt; </code></pre><pre><code>输出结果:Array ( [0] =&gt; Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 ) [1] =&gt; Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 ) [2] =&gt; Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 ) )</code></pre><h1 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h1><p>date() 函数用于格式化时间/日期</p><blockquote><p>string date ( string \$format [, int \$timestamp ] )</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>format</td><td>必需。规定时间戳的格式</td></tr><tr><td>timestamp</td><td>必需。规定时间戳的格式</td></tr></tbody></table><pre><code class="php">&lt;?php    echo date(&quot;y/m/d&quot;,strtotime(&quot;2012-5-6&quot;)).&quot;&lt;br /&gt;&quot;;//strtotime为获取时间戳    echo date(&quot;y-m-d&quot;).&quot;&lt;br /&gt;&quot;;//默认为当前时间戳 time()?&gt; </code></pre><pre><code>输出结果19/05/0619-06-02</code></pre><p><a href="http://www.w3school.com.cn/php/func_date_date.asp" target="_blank" rel="noopener">详细参数</a></p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><blockquote><p>file_exists() </p></blockquote><p>检查文件和目录是否存在，返回布尔值</p><blockquote><p>fopen()</p></blockquote><p>第一个参数含有要打开的文件的名称，第二个参数规定了使用哪种模式来打开文件<br>无法打开文件则返回false</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>r</td><td>只读。在文件的开头开始</td></tr><tr><td>r+</td><td>读/写。在文件的开头开始</td></tr><tr><td>w</td><td>只写。打开并清空文件的内容；如果文件不存在，则创建新文件</td></tr><tr><td>w+</td><td>读/写。打开并清空文件的内容；如果文件不存在，则创建新文件</td></tr><tr><td>a</td><td>追加。打开并向文件末尾进行写操作，如果文件不存在，则创建新文件</td></tr><tr><td>a+</td><td>读/追加。通过向文件末尾写内容，来保持文件内容</td></tr><tr><td>x</td><td>只写。创建新文件。如果文件已存在，则返回 FALSE 和一个错误</td></tr><tr><td>x+</td><td>读/写。创建新文件。如果文件已存在，则返回 FALSE 和一个错误</td></tr></tbody></table><h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><blockquote><p>fclose()</p></blockquote><pre><code class="php">&lt;?php    $file = fopen(&quot;test.txt&quot;,&quot;r&quot;)    fclose($file);?&gt;</code></pre><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>fgets()</td><td>函数用于从文件中逐行读取文件,在调用该函数之后，文件指针会移动到下一行</td></tr><tr><td>getc()</td><td>函数用于从文件中逐字符地读取文件,在调用该函数之后，文件指针会移动到下一个字符</td></tr><tr><td>feof()</td><td>函数检测是否已到达文件末尾（EOF）,写状态下不可用</td></tr><tr><td>fwrite()/fput()</td><td>写入文件，可选length参数，出现错误返回false</td></tr></tbody></table><pre><code class="php">&lt;?php    $filename=&quot;test.txt&quot;;    if(file_exists($filename)){        $file=fopen($filename,&#39;r+&#39;);        if($file){            fwrite($file,&quot;Hello World&quot;,5);        }else{            echo &quot;文件无法打开&quot;;        }    }else{        echo &quot;文件不存在&quot;;    }?&gt; </code></pre><p>test.txt内容：Hello</p><p><a href="http://www.w3school.com.cn/php/php_ref_filesystem.asp" target="_blank" rel="noopener">Filesystem 函数</a></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h3><p>1.form的enctype 属性规定了在提交表单时要使用哪种内容类型。在表单需要二进制数据时，比如文件内容，请使用 “multipart/form-data”<br>2.input 标签的 type=”file” 属性规定了应该把输入作为文件来处理</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;form action=&quot;upload_file.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;            &lt;label&gt;文件名：&lt;/label&gt;               &lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;&lt;br&gt;            &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;        &lt;/form&gt;    &lt;/body&gt;&lt;/html</code></pre><h3 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h3><p>1.创建上传脚本<br>全局数组 $_FILES，第一个参数是表单的 input name，第二个下标</p><table><thead><tr><th>全局数组</th><th>含义</th></tr></thead><tbody><tr><td>$_FILES[“file”][“name”]</td><td>上传文件的名称</td></tr><tr><td>$_FILES[“file”][“type”]</td><td>上传文件的类型</td></tr><tr><td>$_FILES[“file”][“size”]</td><td>上传文件的大小，以字节计</td></tr><tr><td>$_FILES[“file”][“tmp_name”]</td><td>存储在服务器的文件的临时副本的名称</td></tr><tr><td>$_FILES[“file”][“error”]</td><td>由文件上传导致的错误代码</td></tr></tbody></table><pre><code class="php">if ($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0){    echo &quot;错误：&quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br&gt;&quot;;}else{    echo &quot;上传文件名: &quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;&lt;br&gt;&quot;;    echo &quot;文件类型: &quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &quot;&lt;br&gt;&quot;;    echo &quot;文件大小: &quot; . ($_FILES[&quot;file&quot;][&quot;size&quot;] / 1024) . &quot; kB&lt;br&gt;&quot;;    echo &quot;文件临时存储的位置: &quot; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;];}</code></pre><p>2.上传限制<br>用户只能上传 .gif、.jpeg、.jpg、.png 文件，文件大小必须小于 200 kB</p><pre><code class="php">$allowedExts = array(&quot;gif&quot;, &quot;jpeg&quot;, &quot;jpg&quot;, &quot;png&quot;);//设置允许上传的扩展名$temp = explode(&quot;.&quot;, $_FILES[&quot;file&quot;][&quot;name&quot;]);//explode()将字符串分解成数组$extension = end($temp);        // 获取文件后缀名if ((($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/gif&quot;)|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpeg&quot;)|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpg&quot;)|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/pjpeg&quot;)|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/x-png&quot;)|| ($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/png&quot;))//判断文件类型&amp;&amp;($_FILES[&quot;file&quot;][&quot;size&quot;] &lt; 204800)    // 判断文件大小&amp;&amp; in_array($extension, $allowedExts)) //判断拆分的字符串能不能在允许的字符串中找到{    /*上传代码*/}else{    echo &quot;非法的文件格式&quot;;}</code></pre><p>3.保存上传文件<br>服务器的 PHP 临时文件夹中创建了一个被上传文件的临时副本，这个临时的副本文件会在脚本结束时消失。要保存被上传的文件，我们需要把它拷贝到另外的位置</p><pre><code class="php">if (file_exists(&quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]))//检查文件是否存在{    echo $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot; 文件已经存在。 &quot;;}else{    // 如果 upload 目录不存在该文件则将文件上传到 upload 目录下    move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], &quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]);    echo &quot;文件存储在: &quot; . &quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;];}</code></pre><p>完整代码</p><pre><code class="php">&lt;?php    // 允许上传的图片后缀    $allowedExts = array(&quot;gif&quot;, &quot;jpeg&quot;, &quot;jpg&quot;, &quot;png&quot;);    $temp = explode(&quot;.&quot;, $_FILES[&quot;file&quot;][&quot;name&quot;]);    $extension = end($temp);     // 获取文件后缀名    if ((($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/gif&quot;)        ||($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpeg&quot;)        ||($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/jpg&quot;)        ||($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/pjpeg&quot;)        ||($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/x-png&quot;)        ||($_FILES[&quot;file&quot;][&quot;type&quot;] == &quot;image/png&quot;))        &amp;&amp;($_FILES[&quot;file&quot;][&quot;size&quot;] &lt; 204800)   // 小于 200 kb        &amp;&amp;in_array($extension, $allowedExts)){            if($_FILES[&quot;file&quot;][&quot;error&quot;] &gt; 0){                echo &quot;错误：: &quot; . $_FILES[&quot;file&quot;][&quot;error&quot;] . &quot;&lt;br&gt;&quot;;            }            else{                   echo &quot;上传文件名: &quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;&lt;br&gt;&quot;;                echo &quot;文件类型: &quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &quot;&lt;br&gt;&quot;;                   echo &quot;文件大小: &quot; . ($_FILES[&quot;file&quot;][&quot;size&quot;] / 1024) . &quot; kB&lt;br&gt;&quot;;                   echo &quot;文件临时存储的位置: &quot; . $_FILES[&quot;file&quot;][&quot;tmp_name&quot;] . &quot;&lt;br&gt;&quot;;                // 判断当期目录下的 upload 目录是否存在该文件                // 如果没有 upload 目录，你需要创建它，upload 目录权限为 777                if (file_exists(&quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;])){                       echo $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot; 文件已经存在。 &quot;;                }                else{            // 如果 upload 目录不存在该文件则将文件上传到 upload 目录下                    move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], &quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]);                       echo &quot;文件存储在: &quot; . &quot;upload/&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;];                  }            }        }    else{        echo &quot;非法的文件格式&quot;;    }?&gt;</code></pre><p>文件上传错误码</p><table><thead><tr><th>值</th><th>错误</th><th>错误原因</th></tr></thead><tbody><tr><td>0</td><td>UPLOAD_ERR_OK</td><td>没有错误发生，文件上传成功</td></tr><tr><td>1</td><td>UPLOAD_ERR_INI_SIZE</td><td>上传的文件超过了 php.ini 中 upload_max_filesize选项限制的值</td></tr><tr><td>2</td><td>UPLOAD_ERR_FORM_SIZE</td><td>上传文件的大小超过了 HTML 表单中 MAX_FILE_SIZE 选项指定的值</td></tr><tr><td>3</td><td>UPLOAD_ERR_PARTIAL</td><td>文件只有部分被上传</td></tr><tr><td>4</td><td>UPLOAD_ERR_NO_FILE</td><td>没有文件被上传</td></tr><tr><td>6</td><td>UPLOAD_ERR_NO_TMP_DIR</td><td>找不到临时文件夹</td></tr><tr><td>7</td><td>UPLOAD_ERR_CANT_WRITE</td><td>文件写入失败</td></tr></tbody></table><p><a href="https://blog.csdn.net/qq_41866776/article/details/90742543" target="_blank" rel="noopener">文件上传中type值大全</a></p><h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><h2 id="创建Cookie"><a href="#创建Cookie" class="headerlink" title="创建Cookie"></a>创建Cookie</h2><blockquote><p>setcookie(name, value, expire, path, domain);</p></blockquote><p>setcookie() 函数必须位于 <html> 标签之前</html></p><pre><code class="php">&lt;?php    $expire=time()+60*60*24;//设置过期时间1天    setcookie(&quot;name&quot;, &quot;bob&quot;, $expire);?&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;utf-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;?php            if(isset($_COOKIE[&quot;name&quot;])){                   echo &quot;欢迎 &quot; . $_COOKIE[&quot;name&quot;] . &quot;!&lt;br&gt;&quot;;                   // 查看所有 cookie                print_r($_COOKIE);            }            else                echo &quot;普通访客!&lt;br&gt;&quot;;        ?&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><pre><code>输出结果欢迎 bob!Array ([name] =&gt; bob )</code></pre><h2 id="删除Cookie"><a href="#删除Cookie" class="headerlink" title="删除Cookie"></a>删除Cookie</h2><p>将时间设置过期</p><pre><code class="php">&lt;?phpsetcookie(&quot;name&quot;, &quot;&quot;, time()-60);?&gt;</code></pre><h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><p>1.工作机制：为每个访客创建一个唯一的 id (UID)，并基于这个 UID 来存储变量。UID 存储在 cookie 中，或者通过 URL 进行传导<br>2.会话信息是临时的，在用户离开网站后将被删除</p><h2 id="创建-Session"><a href="#创建-Session" class="headerlink" title="创建 Session"></a>创建 Session</h2><blockquote><p>session_start()</p></blockquote><p>session_start() 函数必须位于 <html> 标签之前</html></p><h2 id="储存-Session"><a href="#储存-Session" class="headerlink" title="储存 Session"></a>储存 Session</h2><p>键值对形式存储</p><blockquote><p>$_SESSION[‘key’]=value</p></blockquote><h2 id="销毁-Session"><a href="#销毁-Session" class="headerlink" title="销毁 Session"></a>销毁 Session</h2><p>销毁指定键</p><blockquote><p>unset() </p></blockquote><p> 销毁所有Session</p><blockquote><p>session_destroy()</p></blockquote><h1 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h1><p>需要一个已安装且正在运行的邮件系统(如：sendmail、postfix、qmail等)。所用的程序通过在 php.ini 文件中的配置设置进行定义</p><p><a href="https://www.runoob.com/php/php-ref-mail.html" target="_blank" rel="noopener">参考</a></p><blockquote><p>mail(to,subject,message,headers,parameters)</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>to</td><td>必需。规定 email 接收者</td></tr><tr><td>subject</td><td>必需。规定 email 的主题</td></tr><tr><td>message</td><td>必需。定义要发送的消息</td></tr><tr><td>headers</td><td>可选。规定附加的标题</td></tr><tr><td>parameters</td><td>可选。对邮件发送程序规定额外的参数</td></tr></tbody></table><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="json-encode"><a href="#json-encode" class="headerlink" title="json_encode"></a>json_encode</h2><p>json_encode() 用于对变量进行 JSON 编码，该函数如果执行成功返回 JSON 数据，否则返回 FALSE</p><blockquote><p>string json_encode ( \$value [, \$options = 0 ] )</p></blockquote><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>value</td><td>要编码的值。该函数只对 UTF-8 编码的数据有效</td></tr><tr><td>options</td><td>由以下常量组成的二进制掩码：JSON_HEX_QUOT, JSON_HEX_TAG, JSON_HEX_AMP, JSON_HEX_APOS, JSON_NUMERIC_CHECK,JSON_PRETTY_PRINT, JSON_UNESCAPED_SLASHES, JSON_FORCE_OBJECT</td></tr></tbody></table><pre><code class="php">&lt;?php   $arr = array(&#39;a&#39;=&gt;1,&#39;b&#39;=&gt;2,&#39;c&#39;=&gt;3);   echo json_encode($arr).&quot;&lt;br /&gt;&quot;;   class person{           public $name;           public $age;           public $sex;           public function __construct($name,$age,$sex){               $this-&gt;name=$name;               $this-&gt;age=$age;               $this-&gt;sex=$sex;           }   }   $p=new person(&quot;bob&quot;,18,&quot;man&quot;);   echo json_encode($p);?&gt;</code></pre><pre><code>输出结果{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}{&quot;name&quot;:&quot;bob&quot;,&quot;age&quot;:18,&quot;sex&quot;:&quot;man&quot;}</code></pre><h2 id="json-decode"><a href="#json-decode" class="headerlink" title="json_decode"></a>json_decode</h2><p>json_decode() 函数用于对 JSON 格式的字符串进行解码，并转换为 PHP 变量</p><blockquote><p>json_decode ( \$ json_string [,\$assoc = false [, \$depth = 512 [, \$options = 0 ]]])</p></blockquote><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>json_string</td><td>待解码的 JSON 字符串，必须是 UTF-8 编码数</td></tr><tr><td>assoc</td><td>当该参数为 TRUE 时，将返回数组，FALSE 时返回对象</td></tr><tr><td>depth</td><td>整数类型的参数，它指定递归深</td></tr><tr><td>options</td><td>二进制掩码，目前只支持 JSON_BIGINT_AS_STRING</td></tr></tbody></table><pre><code class="php">&lt;?php   $json = &#39;{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3}&#39;;   var_dump(json_decode($json));   var_dump(json_decode($json, true));?&gt;</code></pre><pre><code>输出结果object(stdClass)[1]public &#39;a&#39; =&gt; int 1public &#39;b&#39; =&gt; int 2public &#39;c&#39; =&gt; int 3array (size=3) &#39;a&#39; =&gt; int 1 &#39;b&#39; =&gt; int 2 &#39;c&#39; =&gt; int 3</code></pre>]]></content>
    
    <summary type="html">
    
      PHP进阶知识——PHP学习笔记（三）
    
    </summary>
    
      <category term="ht" scheme="/categories/ht/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP表单处理——PHP学习笔记（二）</title>
    <link href="/2019/06/02/ht/1559448766/"/>
    <id>/2019/06/02/ht/1559448766/</id>
    <published>2019-06-02T04:12:46.000Z</published>
    <updated>2020-06-11T02:57:18.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表单的处理"><a href="#表单的处理" class="headerlink" title="表单的处理"></a>表单的处理</h1><h2 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h2><p>前端代码：<br>前端代码包括一个HTML表单，action为提交的php文件，方法为post/get（见后文），表单中包含一个输入框以及提交按钮（属性为submit）。 </p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;form action=&quot;test.php&quot; method=&quot;post&quot;&gt;            姓名: &lt;input type=&quot;text&quot; name=&quot;fname&quot;&gt;            &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;        &lt;/form&gt;    &lt;/body&gt;&lt;/html</code></pre><p>后端代码<br>后端用超级全局变量$_POST接受前端的post方法传过来的值，post的键对应前端输入框的name属性</p><pre><code class="php">&lt;?php    echo &quot;欢迎&quot;.$_POST[&quot;fname&quot;]?&gt; </code></pre><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><p>前端代码<br>前端代码表达包含一个下拉选择框</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;form action=&quot;test.php&quot; method=&quot;get&quot;&gt;             &lt;select name=&quot;q&quot;&gt;                &lt;option value=&quot;&quot;&gt;选择等级:&lt;/option&gt;                &lt;option value=&quot;A&quot;&gt;A&lt;/option&gt;                &lt;option value=&quot;B&quot;&gt;B&lt;/option&gt;                   &lt;option value=&quot;C&quot;&gt;C&lt;/option&gt;            &lt;/select&gt;            &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;        &lt;/form&gt;    &lt;/body&gt;&lt;/html</code></pre><p>后端代码<br>后端用超级全局变量$_GET接受前端的get方法传过来的值，post的键对应前端输入框的name属性，值为下拉框中的value的值</p><pre><code class="php">&lt;?php    $q=$_GET[&#39;q&#39;];    if($q==&#39;A&#39;){        echo &quot;你的成绩在80-100&quot;;    }elseif($q==&#39;B&#39;){        echo &quot;你的成绩在60-80&quot;;    }else{        echo &quot;你的成绩在60以下&quot;;    }?&gt; </code></pre><h2 id="下拉多选菜单"><a href="#下拉多选菜单" class="headerlink" title="下拉多选菜单"></a>下拉多选菜单</h2><p> 前端代码<br>下拉菜单是多选的（ multiple=”multiple”），通过将设置 select name=”q[]” 以数组的方式获取</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;form action=&quot;test.php&quot; method=&quot;post&quot;&gt;                &lt;select multiple=&quot;multiple&quot; name=&quot;q[]&quot;&gt;                  &lt;option value=&quot;&quot;&gt;选择食物:&lt;/option&gt;                   &lt;option value=&quot;cake&quot;&gt;Cake&lt;/option&gt;                &lt;option value=&quot;Chocolate&quot;&gt;Chocolate&lt;/option&gt;                &lt;option value=&quot;Biscuits&quot;&gt;Biscuits&lt;/option&gt;            &lt;/select&gt;            &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;        &lt;/form&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>后端代码<br>后端接收为一个数组</p><pre><code class="php">&lt;?php    $q=$_POST[&#39;q&#39;];    echo &quot;你选择了&lt;br /&gt;&quot;;    foreach($q as $val){        echo $val.&quot;&lt;br /&gt;&quot;;    }?&gt; </code></pre><h2 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h2><p>前端代码<br>单选框设置相同的name属性</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;form action=&quot;test.php&quot; method=&quot;post&quot;&gt;                &lt;input type=&quot;radio&quot; name=&quot;q&quot; value=&quot;cake&quot; /&gt;cake            &lt;input type=&quot;radio&quot; name=&quot;q&quot; value=&quot;Chocolate&quot; /&gt;Chocolate            &lt;input type=&quot;radio&quot; name=&quot;q&quot; value=&quot;Biscuits&quot; /&gt;Biscuits            &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;        &lt;/form&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>后端代码</p><pre><code class="php">&lt;?php    $q=$_POST[&#39;q&#39;];    echo &quot;你选择了&quot;.$q;?&gt;</code></pre><h2 id="复选框"><a href="#复选框" class="headerlink" title="复选框"></a>复选框</h2><p> 前端代码<br>name属性设置为数组</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset=&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;/title&gt;    &lt;/head&gt;    &lt;body&gt;        &lt;form action=&quot;test.php&quot; method=&quot;post&quot;&gt;                &lt;input type=&quot;checkbox&quot; name=&quot;q[]&quot; value=&quot;cake&quot; /&gt;cake            &lt;input type=&quot;checkbox&quot; name=&quot;q[]&quot; value=&quot;Chocolate&quot; /&gt;Chocolate            &lt;input type=&quot;checkbox&quot; name=&quot;q[]&quot; value=&quot;Biscuits&quot; /&gt;Biscuits            &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt;        &lt;/form&gt;    &lt;/body&gt;&lt;/html</code></pre><p>后端代码</p><pre><code class="php">&lt;?php    $q=$_POST[&#39;q&#39;];    echo &quot;你选择了&lt;br /&gt;&quot;;    foreach($q as $val){        echo $val.&quot;&lt;br /&gt;&quot;;    }?&gt; </code></pre><h1 id="表单的变量"><a href="#表单的变量" class="headerlink" title="表单的变量"></a>表单的变量</h1><h2 id="GET"><a href="#GET" class="headerlink" title="$_GET"></a>$_GET</h2><p> 1.$_GET 变量用于收集来自 method=”get” 的表单中的值<br> 2.带有 GET 方法的表单发送的信息，对任何人都是可见的（会显示在浏览器的地址栏），在发送密码或其他敏感信息时，不使用<br> 3.不能超过 2000 个字符，不适合大型变量</p><h2 id="POST"><a href="#POST" class="headerlink" title="$_POST"></a>$_POST</h2><p> 1.$_POST 变量用于收集来自 method=”post” 的表单中的值<br> 2.有 POST 方法的表单发送的信息，对任何人都是不可见的（不会显示在浏览器的地址栏）,无法加入书签<br> 3.对发送信息的量也没有限制</p><h2 id="REQUES"><a href="#REQUES" class="headerlink" title="$_REQUES"></a>$_REQUES</h2><p> $_REQUEST 变量可用来收集通过 GET 和 POST 方法发送的表单数据</p>]]></content>
    
    <summary type="html">
    
      PHP表单处理——PHP学习笔记（二）
    
    </summary>
    
      <category term="ht" scheme="/categories/ht/"/>
    
    
  </entry>
  
  <entry>
    <title>PHP基础知识——PHP学习笔记（一）</title>
    <link href="/2019/05/28/ht/1559020580/"/>
    <id>/2019/05/28/ht/1559020580/</id>
    <published>2019-05-28T05:16:20.000Z</published>
    <updated>2020-06-11T02:57:18.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PHP规范"><a href="#PHP规范" class="headerlink" title="PHP规范"></a>PHP规范</h1><p> PHP代码写在&lt;?php?&gt;</p><pre><code class="php">&lt;?php// 这里是PHP代码?&gt;</code></pre><p>php注释</p><pre><code class="php">//单行注释/*多行注释*/</code></pre><h1 id="pho输出"><a href="#pho输出" class="headerlink" title="pho输出"></a>pho输出</h1><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p>可以输出一个或多个字符串，无返回值</p><h2 id="print"><a href="#print" class="headerlink" title="print"></a>print</h2><p>只允许输出一个字符串，返回值总为 1</p><h1 id="PHP变量"><a href="#PHP变量" class="headerlink" title="PHP变量"></a>PHP变量</h1><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>1.变量名以 $ 符号开始，后面跟着变量的名称<br>2.变量名必须以字母或者下划线字符开<br>3.变量名只能包含字母数字字符以及下划线<br>4.变量不能有空格，变量区分大小写</p><h2 id="创建php变量名"><a href="#创建php变量名" class="headerlink" title="创建php变量名"></a>创建php变量名</h2><p>php不用申明变量，在第一次赋值的时候自动创建</p><h2 id="局部作用域和全局作用域"><a href="#局部作用域和全局作用域" class="headerlink" title="局部作用域和全局作用域"></a>局部作用域和全局作用域</h2><p>在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字在函数中调用全局变量</p><pre><code class="php">&lt;?php     $x=1; // 全局变量     function test()     {         $y=2; // 局部变量         echo &quot;函数中调用x的值为:$x&quot;;        echo &quot;&lt;br&gt;&quot;;         echo &quot;函数中调用y的值为:$y&quot;;        echo &quot;&lt;br&gt;&quot;;     }     test();    echo &quot;外部调用x的值为:$x&quot;;     echo &quot;&lt;br&gt;&quot;;     echo &quot;外部调用x的值为:$y&quot;;     echo &quot;&lt;br&gt;&quot;;?&gt;</code></pre><p>输出结果为：<br>函数中调用x的值为:<br>函数中调用y的值为:2<br>外部调用x的值为:1<br>外部调用y的值为:</p><pre><code class="php">&lt;?php     $x=1; // 全局变量    function test()     {         global $x; // 局部变量         echo &quot;函数中调用x的值为:$x&quot;;        echo &quot;&lt;br&gt;&quot;;        $x=2;    }     test();    echo &quot;外部调用x的值为:$x&quot;;?&gt;</code></pre><p>输出结果为：<br>函数中调用x的值为:1<br>外部调用x的值为：2</p><p>PHP 将所有全局变量存储在一个名为 $GLOBALS[index] 的数组中。 index 保存变量的名称。</p><h2 id="Static-作用域"><a href="#Static-作用域" class="headerlink" title="Static 作用域"></a>Static 作用域</h2><p>当一个函数被完成时，局部变量会被删除，可使用Static关键字来保留局部变量</p><pre><code class="php">&lt;?php    function test()    {        static $x=0;        echo $x;        $x++;           echo &quot;&lt;br&gt;&quot;;    // 换行符     }     echo &quot;第1次使用函数x为:&quot;;    test();    echo &quot;第2次使用函数x为:&quot;;    test();    echo &quot;第3次使用函数x为:&quot;;    test();?&gt;</code></pre><pre><code>输出结果第1次使用函数x为:0第2次使用函数x为:1第3次使用函数x为:2</code></pre><h2 id="超级全局变量"><a href="#超级全局变量" class="headerlink" title="超级全局变量"></a>超级全局变量</h2><table><thead><tr><th>变量名</th><th>描述</th></tr></thead><tbody><tr><td>$GLOBALS</td><td>$GLOBALS 是一个包含了全部变量的全局组合数组。变量的名字就是数组的键</td></tr><tr><td>$_SERVER</td><td>$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目<a href="https://img-blog.csdnimg.cn/20190601170215360.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxODY2Nzc2,size_16,color_FFFFFF" target="_blank" rel="noopener">$_SERVER中的元素</a></td></tr><tr><td>$_POST</td><td>$_POST 被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”post”</td></tr><tr><td>$_GET</td><td>$_GET 同样被广泛应用于收集表单数据，在HTML form标签的指定该属性：”method=”get”</td></tr></tbody></table><h1 id="PHP常量"><a href="#PHP常量" class="headerlink" title="PHP常量"></a>PHP常量</h1><p>常量值被定义后，在脚本的其他任何地方都不能被改变<br>一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)。<br>常量是全局的</p><h2 id="设置常量"><a href="#设置常量" class="headerlink" title="设置常量"></a>设置常量</h2><blockquote><p>bool define ( string $name , mixed $value [, bool $case_insensitive = false ] )</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>必选参数，常量名称，即标志符</td></tr><tr><td>value</td><td>必选参数，常量的值</td></tr><tr><td>case_insensitive</td><td>可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感</td></tr></tbody></table><pre><code class="php">&lt;?php    define(&quot;TEST&quot;, &quot;不区分大小写&quot;,true);    echo TEST;    echo &#39;&lt;br&gt;&#39;;    echo test;?&gt;</code></pre><pre><code>输出结果不区分大小写不区分大小写</code></pre><h2 id="魔术常量"><a href="#魔术常量" class="headerlink" title="魔术常量"></a>魔术常量</h2><table><thead><tr><th>常量名</th><th>注释</th></tr></thead><tbody><tr><td>__ LINE__</td><td>文件中的当前行号</td></tr><tr><td>__ FILE__</td><td>文件的完整路径和文件名</td></tr><tr><td>__ DIR__</td><td>文件所在的目录</td></tr><tr><td>__ FUNCTION__</td><td>函数名称</td></tr><tr><td>__ CLASS__</td><td>类的名称</td></tr><tr><td>__ METHOD__</td><td>类的方法名</td></tr><tr><td>__ NAMESPACE__</td><td>当前命名空间的名称（区分大小写）</td></tr></tbody></table><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p> 函数返回变量的数据类型和值</p><blockquote><p>var_dump()</p></blockquote><table><thead><tr><th>类型</th><th>中文</th><th>注解</th></tr></thead><tbody><tr><td>String</td><td>字符串</td><td>可放单引号和双引号中</td></tr><tr><td>Integer</td><td>整型</td><td>十进制， 十六进制（ 以 0x 为前缀）或八进制（前缀为 0）</td></tr><tr><td>Float</td><td>浮点型</td><td>带小数部分的数字，或是指数形式</td></tr><tr><td>Boolean</td><td>布尔型</td><td>TRUE 或 FALSE</td></tr><tr><td>Array</td><td>数组</td><td>一个变量中存储多个值</td></tr><tr><td>Object</td><td>对象</td><td>在 PHP 中，对象必须声明</td></tr><tr><td>NULL</td><td>空值</td><td>NULL 值表示变量没有值</td></tr></tbody></table><pre><code class="php">&lt;?php     $x = &quot;hello&quot;; //字符串    var_dump($x);    echo &quot;&lt;br&gt;&quot;;     $x = 10;//整形    var_dump($x);    echo &quot;&lt;br&gt;&quot;;     $x = 1.1;//浮点型    var_dump($x);    echo &quot;&lt;br&gt;&quot;;    $x = true; //布尔型    var_dump($x);    echo &quot;&lt;br&gt;&quot;;    $x = array(1,2,3); //数组    var_dump($x);    echo &quot;&lt;br&gt;&quot;;    $y; //空值    var_dump($y);?&gt;</code></pre><pre><code>输出结果：E:\WebProject\phptest\test.php:3:string &#39;hello&#39; (length=5E:\WebProject\phptest\test.php:6:int 1E:\WebProject\phptest\test.php:9:float 1.E:\WebProject\phptest\test.php:12:boolean truE:\WebProject\phptest\test.php:15:array (size=3) 0 =&gt; int 1 1 =&gt; int 2 2 =&gt; int 3 E:\WebProject\phptest\test.php:18:null</code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>1.字符串用 . 连接<br>2.strlen() 函数返回字符串的长度（字符数）<br>3.strpos(“”,””) 函数用于在字符串内查找一个字符或一段指定的文本，如果在字符串中找到匹配，该函数会返回第一个匹配的字符位置。如果未找到匹配，则返回 FALSE</p><pre><code class="php">&lt;?php     echo strpos(&quot;Hello world!&quot;,&quot;world&quot;); ?&gt;输出6</code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>创建数组<br>1.自动分配 ID 键 </p><blockquote><p>$变量名=array(“”,””,””)</p></blockquote><p>2.人工分配 ID 键</p><blockquote><p>\$变量名[0]=””<br>\$变量名[1]=””<br>\$变量名[2]=””</p></blockquote><p>3.获取数组的长度<br>count() 函数用于返回数组的长度<br>4.关联数组</p><blockquote><p>$变量名=array(“key”=&gt;”value”,”key”=&gt;”value”,”key”=&gt;”value”);<br>or<br>$变量名[key]=”value”<br>$变量名[key]=”value”<br>$变量名[key]=”value”</p></blockquote><p>5.遍历关联数组</p><blockquote><p>foreach($数组变量名 as $x=&gt;$x_value){}</p></blockquote><pre><code class="php">&lt;?php    $score=array(&quot;NO.1&quot;=&gt;&quot;100&quot;,&quot;NO.2&quot;=&gt;&quot;90&quot;,&quot;NO.3&quot;=&gt;&quot;80&quot;);    foreach($score as $x=&gt;$x_value)    {        echo $x . &quot;的成绩是&quot; . $x_value;        echo &quot;&lt;br&gt;&quot;;    }?&gt;</code></pre><pre><code>输出结果NO.1的成绩是100NO.2的成绩是90NO.3的成绩是80</code></pre><p>6.数组排序</p><table><thead><tr><th>函数</th><th>注解</th></tr></thead><tbody><tr><td>sort()</td><td>对数组进行升序排列</td></tr><tr><td>rsort()</td><td>对数组进行降序排列</td></tr><tr><td>asort()</td><td>根据关联数组的值，对数组进行升序排列</td></tr><tr><td>ksort()</td><td>根据关联数组的键，对数组进行升序排列</td></tr><tr><td>arsort()</td><td>根据关联数组的值，对数组进行降序排列</td></tr><tr><td>krsort()</td><td>根据关联数组的键，对数组进行降序排列</td></tr></tbody></table><h1 id="类型比较"><a href="#类型比较" class="headerlink" title="类型比较"></a>类型比较</h1><p>1.松散比较： == ，只比较值，不比较类型。<br>2.严格比较：=== ，除了比较值，也比较类型<br>3.比较运算符中&gt;=正确表达，返回布尔值<br>4.优先级： &amp;&amp;  &gt;  =  &gt;  and<br>5.优先级： ||  &gt;  =  &gt;  or</p><h1 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h1><p>引入的多个文件中可能存在同名的类、函数、常量，就会报错</p><h2 id="定义命名空间"><a href="#定义命名空间" class="headerlink" title="定义命名空间"></a>定义命名空间</h2><p>命名空间通过关键字namespace 来声明。如果一个文件中包含命名空间，它必须在其它所有代码之前声明命名空间</p><pre><code class="php">&lt;?php      namespace MyProject;    const CONNECT_OK = 1;//常量    class Connection { /* ... */ }//类    function connect() { /* ... */}//函数?&gt;  </code></pre><h2 id="空间成员"><a href="#空间成员" class="headerlink" title="空间成员"></a>空间成员</h2><p>1.空间只影响类、函数、常量(const)<br>2.其他代码不受影响 </p><h2 id="子空间以及访问方式"><a href="#子空间以及访问方式" class="headerlink" title="子空间以及访问方式"></a>子空间以及访问方式</h2><p>子空间命名</p><pre><code class="php">&lt;?phpnamespace MyProject\Sub\Level;  //声明分层次的单个命名空间const CONNECT_OK = 1;class Connection { /* ... */ }function Connect() { /* ... */  ?&gt;</code></pre><p> 访问方式</p><ul><li>非限定访问:访问当前空间的成员 </li><li>限定访问:只能访问当前空间的子空间的成员 子文件夹\元素名</li><li>完全限定:可以访问其他空间的所有成员 \空间名\元素名</li></ul><p>use 空间名\空间名 【as 别名】：将指定空间引入到当前空间。同可以使用as关键字为被引入的空间起个别名</p><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="类的定义以及实例化"><a href="#类的定义以及实例化" class="headerlink" title="类的定义以及实例化"></a>类的定义以及实例化</h2><p>1.类使用 class 关键字后加上类名定义<br>2.类名后的一对大括号({})内可以定义变量和方法<br>3.类的变量使用 var 来声明, 变量也可以初始化值。<br>4.函数定义类似 PHP 函数的定义，但函数只能通过该类及其实例化的对象访问<br>5.变量 \$this 代表自身的对象。-&gt;指向成员变量名称<br>6.调用成员函数用-&gt;</p><pre><code class="php">&lt;?php    class Car{      /* 成员变量 */      var $cloor;      /* 成员函数 */     function setCloor($col){        $this-&gt;cloor = $col;      }      function showCloor(){           echo $this-&gt;cloor;      }    }    $Volvo=new Car;    $Volvo-&gt;setCloor(&quot;red&quot;);    $Volvo-&gt;showCloor();?&gt;</code></pre><h2 id="php构造函数"><a href="#php构造函数" class="headerlink" title="php构造函数"></a>php构造函数</h2><p>要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，在创建对象的语句中与 new 运算符一起使用</p><blockquote><p>void __construct ([ mixed $args [, $… ]] )</p></blockquote><pre><code class="php">&lt;?php    class Car{      /* 成员变量 */      var $cloor;      /* 成员函数 */     function __construct($col){           $this-&gt;cloor = $col;    }      function showCloor(){           echo $this-&gt;cloor;      }    }    $Volvo=new Car(&quot;red&quot;);    $Volvo-&gt;showCloor();?&gt;</code></pre><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>当对象结束其生命周期时（例如对象所在的函数已调用完毕），系统自动执行析构函</p><blockquote><p>void __destruct ( void )</p></blockquote><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>访问控制</p><ul><li>public（公有）：公有的类成员可以在任何地方被访问。</li><li>protected（受保护）：受保护的类成员则可以被其自身以及其子类和父类访问。</li><li>private（私有）：私有的类成员则只能被其定义所在的类访问。</li></ul><p>继承<br>PHP 不支持多继承</p><pre><code class="php">&lt;?php    class Car{         public $cloor;         function __construct($col){               $this-&gt;cloor = $col;        }          function showCloor(){               echo $this-&gt;cloor;          }    }    class Scar extends Car{        public $speed;        function __construct($col,$spd){            $this-&gt;cloor = $col;            $this-&gt;speed = $spd;        }        function showSpeed(){            echo &quot;&lt;br /&gt;&quot;.$this-&gt;speed;        }    }    $Volvo=new SCar(&quot;red&quot;,55);    $Volvo-&gt;showCloor();    $Volvo-&gt;showSpeed();?&gt;</code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>1.使用接口（interface），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容<br>2.接口是通过 interface 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的<br>3.接口中定义的所有方法都必须是公有，这是接口的特性<br>4.要实现一个接口，使用 implements 操作符。类中必须实现接口中定义的所有方法，否则会报一个致命错误。类可以实现多个接口，用逗号来分隔多个接口的名称。</p><pre><code class="php">&lt;?php    //定义接口    interface interface_1    {            public function dosomething();    }    // 实现接口    class interface_2 implements interface_1    {        public function dosomething()        {            /**/        }    }?&gt;</code></pre><h2 id="Static-关键字"><a href="#Static-关键字" class="headerlink" title="Static 关键字"></a>Static 关键字</h2><p>1.声明类属性或方法为 static(静态)，就可以不实例化类而直接访问,类名: :方法名<br>2.静态属性不能通过一个类已实例化的对象来访问（但静态方法可以）<br>3.由于静态方法不需要通过对象即可调用，所以伪变量 $this 在静态方法中不可用<br>4.静态属性不可以由对象通过 -&gt; 操作符来访问。</p><pre><code class="php">&lt;?php    class test{          public static $my_static = &#39;test&#39;;          public function showValue() {             return self::$my_static;         }    }    echo test::$my_static . &quot;&lt;br /&gt;&quot;;    $test = new test();    echo  $test-&gt;showValue();?&gt; </code></pre><h2 id="Final-关键字"><a href="#Final-关键字" class="headerlink" title="Final 关键字"></a>Final 关键字</h2><p>如果父类中的方法被声明为 final，则子类无法覆盖该方法。如果一个类被声明为 final，则不能被继承。</p><h2 id="调用父类构造方法"><a href="#调用父类构造方法" class="headerlink" title="调用父类构造方法"></a>调用父类构造方法</h2><p>PHP 不会在子类的构造方法中自动的调用父类的构造方法。要执行父类的构造方法，需要在子类的构造方法中调用 parent::__construct() </p><pre><code class="php">&lt;?php    class parentclass{        function __construct(){            echo &quot;这是父类的构造方法&lt;br /&gt;&quot;;        }    }    class childclass extends parentclass{        function __construct(){            parent::__construct();            echo &quot;这是子类的构造方法&quot;;        }    }    $obj=new childclass;?&gt; </code></pre><pre><code>输出结果这是父类的构造方法这是子类的构造方法</code></pre>]]></content>
    
    <summary type="html">
    
      PHP基础知识——PHP学习笔记（一）
    
    </summary>
    
      <category term="ht" scheme="/categories/ht/"/>
    
    
  </entry>
  
</feed>
